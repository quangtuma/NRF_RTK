
RTK_nrf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b90  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004d28  08004d28  00005d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d48  08004d48  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004d48  08004d48  00005d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d50  08004d50  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d50  08004d50  00005d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d54  08004d54  00005d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004d58  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000010  08004d68  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08004d68  000065f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ffa6  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021f1  00000000  00000000  00015fe6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  000181d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c68  00000000  00000000  000191b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e37  00000000  00000000  00019e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d1e  00000000  00000000  00030c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000904a2  00000000  00000000  0004196d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d1e0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004364  00000000  00000000  000d1e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  000d61b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004d10 	.word	0x08004d10

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08004d10 	.word	0x08004d10

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b5b0      	push	{r4, r5, r7, lr}
 80004ca:	b086      	sub	sp, #24
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fd43 	bl	8000f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f8e3 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 f9f7 	bl	80008c8 <MX_GPIO_Init>
  MX_SPI2_Init();
 80004da:	f000 f947 	bl	800076c <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80004de:	f000 f9c9 	bl	8000874 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80004e2:	f000 f979 	bl	80007d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  csn_high();
 80004e6:	f004 f90f 	bl	8004708 <csn_high>
  nrf24_init();
 80004ea:	f004 fbd5 	bl	8004c98 <nrf24_init>
  nrf24_tx_pwr(_0dbm);
 80004ee:	2003      	movs	r0, #3
 80004f0:	f004 f9aa 	bl	8004848 <nrf24_tx_pwr>
  nrf24_data_rate(_1mbps);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f004 f9cd 	bl	8004894 <nrf24_data_rate>
  nrf24_set_channel(78);
 80004fa:	204e      	movs	r0, #78	@ 0x4e
 80004fc:	f004 f9f8 	bl	80048f0 <nrf24_set_channel>
  nrf24_set_crc(en_crc, _1byte);
 8000500:	2100      	movs	r1, #0
 8000502:	2001      	movs	r0, #1
 8000504:	f004 facc 	bl	8004aa0 <nrf24_set_crc>
  nrf24_pipe_pld_size(0, NRF_SIZE);
 8000508:	2120      	movs	r1, #32
 800050a:	2000      	movs	r0, #0
 800050c:	f004 fa0c 	bl	8004928 <nrf24_pipe_pld_size>
  uint8_t addr[5] = { 0x10, 0x21, 0x32, 0x43, 0x54 };
 8000510:	4a57      	ldr	r2, [pc, #348]	@ (8000670 <main+0x1a8>)
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000518:	6018      	str	r0, [r3, #0]
 800051a:	3304      	adds	r3, #4
 800051c:	7019      	strb	r1, [r3, #0]
  nrf24_open_tx_pipe(addr);
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4618      	mov	r0, r3
 8000522:	f004 f9f4 	bl	800490e <nrf24_open_tx_pipe>
  nrf24_open_rx_pipe(0, addr);
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	4619      	mov	r1, r3
 800052a:	2000      	movs	r0, #0
 800052c:	f004 fa4a 	bl	80049c4 <nrf24_open_rx_pipe>

  HAL_Delay(1000); // waiting initial Station
 8000530:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000534:	f000 fd82 	bl	800103c <HAL_Delay>
#endif

#endif

#ifdef RX
  nrf24_listen();
 8000538:	f004 fb58 	bl	8004bec <nrf24_listen>
  HAL_UART_Receive_IT(&huart2, &rover_gga_message[gga_index], 1);
 800053c:	4b4d      	ldr	r3, [pc, #308]	@ (8000674 <main+0x1ac>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	461a      	mov	r2, r3
 8000544:	4b4c      	ldr	r3, [pc, #304]	@ (8000678 <main+0x1b0>)
 8000546:	4413      	add	r3, r2
 8000548:	2201      	movs	r2, #1
 800054a:	4619      	mov	r1, r3
 800054c:	484b      	ldr	r0, [pc, #300]	@ (800067c <main+0x1b4>)
 800054e:	f003 f96a 	bl	8003826 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000552:	484b      	ldr	r0, [pc, #300]	@ (8000680 <main+0x1b8>)
 8000554:	f002 fca2 	bl	8002e9c <HAL_TIM_Base_Start_IT>
		  HAL_Delay(1);
	  }
#endif
#ifdef RX
	  // NRF Receiver Processing
	  nrf24_listen();
 8000558:	f004 fb48 	bl	8004bec <nrf24_listen>
	  if (nrf24_data_available()){
 800055c:	f004 fb62 	bl	8004c24 <nrf24_data_available>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d04d      	beq.n	8000602 <main+0x13a>
		  nrf24_receive(nrf_rx_packet, sizeof(nrf_rx_packet));
 8000566:	2120      	movs	r1, #32
 8000568:	4846      	ldr	r0, [pc, #280]	@ (8000684 <main+0x1bc>)
 800056a:	f004 fb71 	bl	8004c50 <nrf24_receive>

		  //HAL_UART_Transmit(&huart2, nrf_rx_packet, NRF_SIZE, 10);

		  memcpy(&nrf_rx_data[nrf_packet_id], nrf_rx_packet, sizeof(nrf_rx_packet) / sizeof(uint8_t));
 800056e:	4b46      	ldr	r3, [pc, #280]	@ (8000688 <main+0x1c0>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	461a      	mov	r2, r3
 8000574:	4b45      	ldr	r3, [pc, #276]	@ (800068c <main+0x1c4>)
 8000576:	4413      	add	r3, r2
 8000578:	4a42      	ldr	r2, [pc, #264]	@ (8000684 <main+0x1bc>)
 800057a:	461c      	mov	r4, r3
 800057c:	4615      	mov	r5, r2
 800057e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000580:	6020      	str	r0, [r4, #0]
 8000582:	6061      	str	r1, [r4, #4]
 8000584:	60a2      	str	r2, [r4, #8]
 8000586:	60e3      	str	r3, [r4, #12]
 8000588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800058a:	6120      	str	r0, [r4, #16]
 800058c:	6161      	str	r1, [r4, #20]
 800058e:	61a2      	str	r2, [r4, #24]
 8000590:	61e3      	str	r3, [r4, #28]
		  nrf_packet_id += NRF_SIZE;
 8000592:	4b3d      	ldr	r3, [pc, #244]	@ (8000688 <main+0x1c0>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	3320      	adds	r3, #32
 8000598:	b29a      	uxth	r2, r3
 800059a:	4b3b      	ldr	r3, [pc, #236]	@ (8000688 <main+0x1c0>)
 800059c:	801a      	strh	r2, [r3, #0]

		  if (Check_End_Index(nrf_rx_data, MAX_SIZE, 0) == 1){
 800059e:	2200      	movs	r2, #0
 80005a0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80005a4:	4839      	ldr	r0, [pc, #228]	@ (800068c <main+0x1c4>)
 80005a6:	f000 fa0f 	bl	80009c8 <Check_End_Index>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d11b      	bne.n	80005e8 <main+0x120>

			  HAL_UART_Transmit(&huart2, nrf_rx_data, rtcm_end_id, 250);
 80005b0:	4b37      	ldr	r3, [pc, #220]	@ (8000690 <main+0x1c8>)
 80005b2:	881a      	ldrh	r2, [r3, #0]
 80005b4:	23fa      	movs	r3, #250	@ 0xfa
 80005b6:	4935      	ldr	r1, [pc, #212]	@ (800068c <main+0x1c4>)
 80005b8:	4830      	ldr	r0, [pc, #192]	@ (800067c <main+0x1b4>)
 80005ba:	f003 f8a9 	bl	8003710 <HAL_UART_Transmit>

			  for (uint16_t i = 0; i < rtcm_end_id; i++){
 80005be:	2300      	movs	r3, #0
 80005c0:	82fb      	strh	r3, [r7, #22]
 80005c2:	e006      	b.n	80005d2 <main+0x10a>
				  nrf_rx_data[i] = '\0';
 80005c4:	8afb      	ldrh	r3, [r7, #22]
 80005c6:	4a31      	ldr	r2, [pc, #196]	@ (800068c <main+0x1c4>)
 80005c8:	2100      	movs	r1, #0
 80005ca:	54d1      	strb	r1, [r2, r3]
			  for (uint16_t i = 0; i < rtcm_end_id; i++){
 80005cc:	8afb      	ldrh	r3, [r7, #22]
 80005ce:	3301      	adds	r3, #1
 80005d0:	82fb      	strh	r3, [r7, #22]
 80005d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000690 <main+0x1c8>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	8afa      	ldrh	r2, [r7, #22]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d3f3      	bcc.n	80005c4 <main+0xfc>
			  }

			  nrf_packet_id = 0;
 80005dc:	4b2a      	ldr	r3, [pc, #168]	@ (8000688 <main+0x1c0>)
 80005de:	2200      	movs	r2, #0
 80005e0:	801a      	strh	r2, [r3, #0]
			  rtcm_end_id = 0;
 80005e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <main+0x1c8>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	801a      	strh	r2, [r3, #0]
		  }

		  for (uint8_t i = 0; i < NRF_SIZE; i++){
 80005e8:	2300      	movs	r3, #0
 80005ea:	757b      	strb	r3, [r7, #21]
 80005ec:	e006      	b.n	80005fc <main+0x134>
			  nrf_rx_packet[i] = '\0';
 80005ee:	7d7b      	ldrb	r3, [r7, #21]
 80005f0:	4a24      	ldr	r2, [pc, #144]	@ (8000684 <main+0x1bc>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	54d1      	strb	r1, [r2, r3]
		  for (uint8_t i = 0; i < NRF_SIZE; i++){
 80005f6:	7d7b      	ldrb	r3, [r7, #21]
 80005f8:	3301      	adds	r3, #1
 80005fa:	757b      	strb	r3, [r7, #21]
 80005fc:	7d7b      	ldrb	r3, [r7, #21]
 80005fe:	2b1f      	cmp	r3, #31
 8000600:	d9f5      	bls.n	80005ee <main+0x126>
		  }
	  }

	  // UART (Rover GGA) Receiver Processing
	  if (data_ready) {
 8000602:	4b24      	ldr	r3, [pc, #144]	@ (8000694 <main+0x1cc>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0a5      	beq.n	8000558 <main+0x90>

		  data_ready = 0;  // Reset flag
 800060c:	4b21      	ldr	r3, [pc, #132]	@ (8000694 <main+0x1cc>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]

		  int comma_count = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]
		  for(int j = 0; j < GGA_SIZE; j++){
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	e020      	b.n	800065e <main+0x196>
			  if (rover_gga_message[j] == 0x2C){ // 2C is ','
 800061c:	4a16      	ldr	r2, [pc, #88]	@ (8000678 <main+0x1b0>)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b2c      	cmp	r3, #44	@ 0x2c
 8000626:	d117      	bne.n	8000658 <main+0x190>
				  comma_count++;
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	3301      	adds	r3, #1
 800062c:	613b      	str	r3, [r7, #16]
				  if (comma_count == 6) // from $GNGGA to Rover Mode
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	2b06      	cmp	r3, #6
 8000632:	d111      	bne.n	8000658 <main+0x190>
				  {
					  rover_mode = rover_gga_message[j + 1];
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	3301      	adds	r3, #1
 8000638:	4a0f      	ldr	r2, [pc, #60]	@ (8000678 <main+0x1b0>)
 800063a:	5cd2      	ldrb	r2, [r2, r3]
 800063c:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <main+0x1d0>)
 800063e:	701a      	strb	r2, [r3, #0]
					  HAL_UART_Receive_IT(&huart2, &rover_gga_message[gga_index], 1);
 8000640:	4b0c      	ldr	r3, [pc, #48]	@ (8000674 <main+0x1ac>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	461a      	mov	r2, r3
 8000648:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <main+0x1b0>)
 800064a:	4413      	add	r3, r2
 800064c:	2201      	movs	r2, #1
 800064e:	4619      	mov	r1, r3
 8000650:	480a      	ldr	r0, [pc, #40]	@ (800067c <main+0x1b4>)
 8000652:	f003 f8e8 	bl	8003826 <HAL_UART_Receive_IT>
					  break;
 8000656:	e005      	b.n	8000664 <main+0x19c>
		  for(int j = 0; j < GGA_SIZE; j++){
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	3301      	adds	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	2bc7      	cmp	r3, #199	@ 0xc7
 8000662:	dddb      	ble.n	800061c <main+0x154>
				  }
			  }
		  }
		  memset(rover_gga_message, 0, sizeof(rover_gga_message));
 8000664:	22c8      	movs	r2, #200	@ 0xc8
 8000666:	2100      	movs	r1, #0
 8000668:	4803      	ldr	r0, [pc, #12]	@ (8000678 <main+0x1b0>)
 800066a:	f004 fb25 	bl	8004cb8 <memset>
	  nrf24_listen();
 800066e:	e773      	b.n	8000558 <main+0x90>
 8000670:	08004d28 	.word	0x08004d28
 8000674:	200005e9 	.word	0x200005e9
 8000678:	20000520 	.word	0x20000520
 800067c:	200000cc 	.word	0x200000cc
 8000680:	20000084 	.word	0x20000084
 8000684:	20000114 	.word	0x20000114
 8000688:	2000051c 	.word	0x2000051c
 800068c:	20000134 	.word	0x20000134
 8000690:	200005ec 	.word	0x200005ec
 8000694:	200005ea 	.word	0x200005ea
 8000698:	200005e8 	.word	0x200005e8

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 fb04 	bl	8004cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b27      	ldr	r3, [pc, #156]	@ (8000764 <SystemClock_Config+0xc8>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a26      	ldr	r2, [pc, #152]	@ (8000764 <SystemClock_Config+0xc8>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b24      	ldr	r3, [pc, #144]	@ (8000764 <SystemClock_Config+0xc8>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b21      	ldr	r3, [pc, #132]	@ (8000768 <SystemClock_Config+0xcc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a20      	ldr	r2, [pc, #128]	@ (8000768 <SystemClock_Config+0xcc>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <SystemClock_Config+0xcc>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000710:	23c0      	movs	r3, #192	@ 0xc0
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000714:	2306      	movs	r3, #6
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000718:	2304      	movs	r3, #4
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f001 f82f 	bl	8001784 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800072c:	f000 fa8e 	bl	8000c4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8000738:	2390      	movs	r3, #144	@ 0x90
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f001 fa92 	bl	8001c74 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000756:	f000 fa79 	bl	8000c4c <Error_Handler>
  }
}
 800075a:	bf00      	nop
 800075c:	3750      	adds	r7, #80	@ 0x50
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800
 8000768:	40007000 	.word	0x40007000

0800076c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000770:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <MX_SPI2_Init+0x64>)
 8000772:	4a18      	ldr	r2, [pc, #96]	@ (80007d4 <MX_SPI2_Init+0x68>)
 8000774:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000776:	4b16      	ldr	r3, [pc, #88]	@ (80007d0 <MX_SPI2_Init+0x64>)
 8000778:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800077c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800077e:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_SPI2_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_SPI2_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_SPI2_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_SPI2_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_SPI2_Init+0x64>)
 8000798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800079c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079e:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_SPI2_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <MX_SPI2_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007aa:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_SPI2_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <MX_SPI2_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007b6:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_SPI2_Init+0x64>)
 80007b8:	220a      	movs	r2, #10
 80007ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <MX_SPI2_Init+0x64>)
 80007be:	f001 fc39 	bl	8002034 <HAL_SPI_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007c8:	f000 fa40 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	2000002c 	.word	0x2000002c
 80007d4:	40003800 	.word	0x40003800

080007d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007de:	f107 0308 	add.w	r3, r7, #8
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007f4:	4b1d      	ldr	r3, [pc, #116]	@ (800086c <MX_TIM3_Init+0x94>)
 80007f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000870 <MX_TIM3_Init+0x98>)
 80007f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1599;
 80007fa:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <MX_TIM3_Init+0x94>)
 80007fc:	f240 623f 	movw	r2, #1599	@ 0x63f
 8000800:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b1a      	ldr	r3, [pc, #104]	@ (800086c <MX_TIM3_Init+0x94>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2599;
 8000808:	4b18      	ldr	r3, [pc, #96]	@ (800086c <MX_TIM3_Init+0x94>)
 800080a:	f640 2227 	movw	r2, #2599	@ 0xa27
 800080e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000810:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_TIM3_Init+0x94>)
 8000812:	2200      	movs	r2, #0
 8000814:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000816:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_TIM3_Init+0x94>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800081c:	4813      	ldr	r0, [pc, #76]	@ (800086c <MX_TIM3_Init+0x94>)
 800081e:	f002 faed 	bl	8002dfc <HAL_TIM_Base_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000828:	f000 fa10 	bl	8000c4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000830:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000832:	f107 0308 	add.w	r3, r7, #8
 8000836:	4619      	mov	r1, r3
 8000838:	480c      	ldr	r0, [pc, #48]	@ (800086c <MX_TIM3_Init+0x94>)
 800083a:	f002 fc81 	bl	8003140 <HAL_TIM_ConfigClockSource>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000844:	f000 fa02 	bl	8000c4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_TIM3_Init+0x94>)
 8000856:	f002 fe89 	bl	800356c <HAL_TIMEx_MasterConfigSynchronization>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000860:	f000 f9f4 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000084 	.word	0x20000084
 8000870:	40000400 	.word	0x40000400

08000874 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000878:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <MX_USART2_UART_Init+0x4c>)
 800087a:	4a12      	ldr	r2, [pc, #72]	@ (80008c4 <MX_USART2_UART_Init+0x50>)
 800087c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087e:	4b10      	ldr	r3, [pc, #64]	@ (80008c0 <MX_USART2_UART_Init+0x4c>)
 8000880:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000886:	4b0e      	ldr	r3, [pc, #56]	@ (80008c0 <MX_USART2_UART_Init+0x4c>)
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800088c:	4b0c      	ldr	r3, [pc, #48]	@ (80008c0 <MX_USART2_UART_Init+0x4c>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000892:	4b0b      	ldr	r3, [pc, #44]	@ (80008c0 <MX_USART2_UART_Init+0x4c>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000898:	4b09      	ldr	r3, [pc, #36]	@ (80008c0 <MX_USART2_UART_Init+0x4c>)
 800089a:	220c      	movs	r2, #12
 800089c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089e:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <MX_USART2_UART_Init+0x4c>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <MX_USART2_UART_Init+0x4c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <MX_USART2_UART_Init+0x4c>)
 80008ac:	f002 fee0 	bl	8003670 <HAL_UART_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008b6:	f000 f9c9 	bl	8000c4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008ba:	bf00      	nop
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	200000cc 	.word	0x200000cc
 80008c4:	40004400 	.word	0x40004400

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	4b35      	ldr	r3, [pc, #212]	@ (80009b8 <MX_GPIO_Init+0xf0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a34      	ldr	r2, [pc, #208]	@ (80009b8 <MX_GPIO_Init+0xf0>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b32      	ldr	r3, [pc, #200]	@ (80009b8 <MX_GPIO_Init+0xf0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	60bb      	str	r3, [r7, #8]
 80008f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b2e      	ldr	r3, [pc, #184]	@ (80009b8 <MX_GPIO_Init+0xf0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a2d      	ldr	r2, [pc, #180]	@ (80009b8 <MX_GPIO_Init+0xf0>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b2b      	ldr	r3, [pc, #172]	@ (80009b8 <MX_GPIO_Init+0xf0>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0301 	and.w	r3, r3, #1
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b27      	ldr	r3, [pc, #156]	@ (80009b8 <MX_GPIO_Init+0xf0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a26      	ldr	r2, [pc, #152]	@ (80009b8 <MX_GPIO_Init+0xf0>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b24      	ldr	r3, [pc, #144]	@ (80009b8 <MX_GPIO_Init+0xf0>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000938:	4820      	ldr	r0, [pc, #128]	@ (80009bc <MX_GPIO_Init+0xf4>)
 800093a:	f000 fecb 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000944:	481e      	ldr	r0, [pc, #120]	@ (80009c0 <MX_GPIO_Init+0xf8>)
 8000946:	f000 fec5 	bl	80016d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800094a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800094e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	4619      	mov	r1, r3
 8000962:	4816      	ldr	r0, [pc, #88]	@ (80009bc <MX_GPIO_Init+0xf4>)
 8000964:	f000 fd32 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000968:	2301      	movs	r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800096c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 030c 	add.w	r3, r7, #12
 800097a:	4619      	mov	r1, r3
 800097c:	4811      	ldr	r0, [pc, #68]	@ (80009c4 <MX_GPIO_Init+0xfc>)
 800097e:	f000 fd25 	bl	80013cc <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8000982:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000990:	2302      	movs	r3, #2
 8000992:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	4619      	mov	r1, r3
 800099a:	4809      	ldr	r0, [pc, #36]	@ (80009c0 <MX_GPIO_Init+0xf8>)
 800099c:	f000 fd16 	bl	80013cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	2006      	movs	r0, #6
 80009a6:	f000 fc48 	bl	800123a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009aa:	2006      	movs	r0, #6
 80009ac:	f000 fc61 	bl	8001272 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009b0:	bf00      	nop
 80009b2:	3720      	adds	r7, #32
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020800 	.word	0x40020800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40020000 	.word	0x40020000

080009c8 <Check_End_Index>:

/* USER CODE BEGIN 4 */

#ifdef RX
uint8_t Check_End_Index(uint8_t* data, uint16_t size, uint16_t start)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	460b      	mov	r3, r1
 80009d2:	807b      	strh	r3, [r7, #2]
 80009d4:	4613      	mov	r3, r2
 80009d6:	803b      	strh	r3, [r7, #0]
	uint8_t d3_count = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	73fb      	strb	r3, [r7, #15]
	for (int i = start; i < size; i++){
 80009dc:	883b      	ldrh	r3, [r7, #0]
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	e022      	b.n	8000a28 <Check_End_Index+0x60>
		if (data[i] == 0xD3)
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	687a      	ldr	r2, [r7, #4]
 80009e6:	4413      	add	r3, r2
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2bd3      	cmp	r3, #211	@ 0xd3
 80009ec:	d102      	bne.n	80009f4 <Check_End_Index+0x2c>
			d3_count++;
 80009ee:	7bfb      	ldrb	r3, [r7, #15]
 80009f0:	3301      	adds	r3, #1
 80009f2:	73fb      	strb	r3, [r7, #15]

		if(d3_count >=5 && data[i-1] == 0x0D && data[i] == 0x0A)
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	2b04      	cmp	r3, #4
 80009f8:	d913      	bls.n	8000a22 <Check_End_Index+0x5a>
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	3b01      	subs	r3, #1
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	4413      	add	r3, r2
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b0d      	cmp	r3, #13
 8000a06:	d10c      	bne.n	8000a22 <Check_End_Index+0x5a>
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b0a      	cmp	r3, #10
 8000a12:	d106      	bne.n	8000a22 <Check_End_Index+0x5a>
		{
			rtcm_end_id = i + 1;
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	3301      	adds	r3, #1
 8000a1a:	b29a      	uxth	r2, r3
 8000a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <Check_End_Index+0x84>)
 8000a1e:	801a      	strh	r2, [r3, #0]
			break;
 8000a20:	e006      	b.n	8000a30 <Check_End_Index+0x68>
	for (int i = start; i < size; i++){
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	3301      	adds	r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	887b      	ldrh	r3, [r7, #2]
 8000a2a:	68ba      	ldr	r2, [r7, #8]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dbd8      	blt.n	80009e2 <Check_End_Index+0x1a>
		}
	}

	if (rtcm_end_id != 0)
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <Check_End_Index+0x84>)
 8000a32:	881b      	ldrh	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <Check_End_Index+0x74>
		return 1;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	e000      	b.n	8000a3e <Check_End_Index+0x76>
	else
		return 0;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	200005ec 	.word	0x200005ec

08000a50 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8000ad0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d132      	bne.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		switch (rover_mode)
 8000a62:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b35      	cmp	r3, #53	@ 0x35
 8000a68:	d014      	beq.n	8000a94 <HAL_TIM_PeriodElapsedCallback+0x44>
 8000a6a:	2b35      	cmp	r3, #53	@ 0x35
 8000a6c:	dc25      	bgt.n	8000aba <HAL_TIM_PeriodElapsedCallback+0x6a>
 8000a6e:	2b30      	cmp	r3, #48	@ 0x30
 8000a70:	d002      	beq.n	8000a78 <HAL_TIM_PeriodElapsedCallback+0x28>
 8000a72:	2b34      	cmp	r3, #52	@ 0x34
 8000a74:	d007      	beq.n	8000a86 <HAL_TIM_PeriodElapsedCallback+0x36>
 8000a76:	e020      	b.n	8000aba <HAL_TIM_PeriodElapsedCallback+0x6a>
		{
			case '0':
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a7e:	4816      	ldr	r0, [pc, #88]	@ (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a80:	f000 fe28 	bl	80016d4 <HAL_GPIO_WritePin>
			break;
 8000a84:	e020      	b.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x78>
			case '4':
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a8c:	4812      	ldr	r0, [pc, #72]	@ (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000a8e:	f000 fe21 	bl	80016d4 <HAL_GPIO_WritePin>
				break;
 8000a92:	e019      	b.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x78>
			case '5':
				interval_mode_5--;
 8000a94:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	3b01      	subs	r3, #1
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000a9e:	701a      	strb	r2, [r3, #0]
				if (interval_mode_5 == 0){
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d10e      	bne.n	8000ac6 <HAL_TIM_PeriodElapsedCallback+0x76>
					interval_mode_5 = INTERVAL_MODE_5;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000aaa:	2202      	movs	r2, #2
 8000aac:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000aae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ab2:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ab4:	f000 fe27 	bl	8001706 <HAL_GPIO_TogglePin>
				}
				break;
 8000ab8:	e005      	b.n	8000ac6 <HAL_TIM_PeriodElapsedCallback+0x76>
			default:
				HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000aba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000abe:	4806      	ldr	r0, [pc, #24]	@ (8000ad8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ac0:	f000 fe21 	bl	8001706 <HAL_GPIO_TogglePin>
				break;
 8000ac4:	e000      	b.n	8000ac8 <HAL_TIM_PeriodElapsedCallback+0x78>
				break;
 8000ac6:	bf00      	nop
		}
	}
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40000400 	.word	0x40000400
 8000ad4:	200005e8 	.word	0x200005e8
 8000ad8:	40020800 	.word	0x40020800
 8000adc:	20000000 	.word	0x20000000

08000ae0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART2){
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a23      	ldr	r2, [pc, #140]	@ (8000b7c <HAL_UART_RxCpltCallback+0x9c>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d140      	bne.n	8000b74 <HAL_UART_RxCpltCallback+0x94>
    	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE) ||
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	2b02      	cmp	r3, #2
 8000afe:	d00d      	beq.n	8000b1c <HAL_UART_RxCpltCallback+0x3c>
			__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) ||
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f003 0308 	and.w	r3, r3, #8
    	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE) ||
 8000b0a:	2b08      	cmp	r3, #8
 8000b0c:	d006      	beq.n	8000b1c <HAL_UART_RxCpltCallback+0x3c>
			__HAL_UART_GET_FLAG(huart, UART_FLAG_NE)) {
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f003 0304 	and.w	r3, r3, #4
			__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) ||
 8000b18:	2b04      	cmp	r3, #4
 8000b1a:	d102      	bne.n	8000b22 <HAL_UART_RxCpltCallback+0x42>

			// Handle UART errors (e.g., reset UART, alert user)
			handleUARTError(huart);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 f849 	bl	8000bb4 <handleUARTError>
		}
		// Check if the buffer is full
		if (rover_gga_message[gga_index] == 0x0A
 8000b22:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <HAL_UART_RxCpltCallback+0xa0>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b16      	ldr	r3, [pc, #88]	@ (8000b84 <HAL_UART_RxCpltCallback+0xa4>)
 8000b2c:	5c9b      	ldrb	r3, [r3, r2]
 8000b2e:	2b0a      	cmp	r3, #10
 8000b30:	d10e      	bne.n	8000b50 <HAL_UART_RxCpltCallback+0x70>
				&& rover_gga_message[gga_index - 1] == 0x0D) {
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <HAL_UART_RxCpltCallback+0xa0>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	3b01      	subs	r3, #1
 8000b3a:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <HAL_UART_RxCpltCallback+0xa4>)
 8000b3c:	5cd3      	ldrb	r3, [r2, r3]
 8000b3e:	2b0d      	cmp	r3, #13
 8000b40:	d106      	bne.n	8000b50 <HAL_UART_RxCpltCallback+0x70>
			data_ready = 1;  // Set flag to indicate data reception is complete
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <HAL_UART_RxCpltCallback+0xa8>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
			gga_index = 0;
 8000b48:	4b0d      	ldr	r3, [pc, #52]	@ (8000b80 <HAL_UART_RxCpltCallback+0xa0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	701a      	strb	r2, [r3, #0]
	    	gga_index++;
			// Continue receiving next byte if buffer is not yet full
			HAL_UART_Receive_IT(&huart2, &rover_gga_message[gga_index], 1);
		}
    }
}
 8000b4e:	e011      	b.n	8000b74 <HAL_UART_RxCpltCallback+0x94>
	    	gga_index++;
 8000b50:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <HAL_UART_RxCpltCallback+0xa0>)
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	3301      	adds	r3, #1
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b09      	ldr	r3, [pc, #36]	@ (8000b80 <HAL_UART_RxCpltCallback+0xa0>)
 8000b5c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, &rover_gga_message[gga_index], 1);
 8000b5e:	4b08      	ldr	r3, [pc, #32]	@ (8000b80 <HAL_UART_RxCpltCallback+0xa0>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <HAL_UART_RxCpltCallback+0xa4>)
 8000b68:	4413      	add	r3, r2
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4807      	ldr	r0, [pc, #28]	@ (8000b8c <HAL_UART_RxCpltCallback+0xac>)
 8000b70:	f002 fe59 	bl	8003826 <HAL_UART_Receive_IT>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40004400 	.word	0x40004400
 8000b80:	200005e9 	.word	0x200005e9
 8000b84:	20000520 	.word	0x20000520
 8000b88:	200005ea 	.word	0x200005ea
 8000b8c:	200000cc 	.word	0x200000cc

08000b90 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <HAL_UART_ErrorCallback+0x20>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d102      	bne.n	8000ba8 <HAL_UART_ErrorCallback+0x18>
        // Handle error if UART has a problem (e.g., disconnection)
        handleUARTError(huart);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f000 f806 	bl	8000bb4 <handleUARTError>
    }
}
 8000ba8:	bf00      	nop
 8000baa:	3708      	adds	r7, #8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40011000 	.word	0x40011000

08000bb4 <handleUARTError>:

void handleUARTError(UART_HandleTypeDef *huart) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
    // Disable UART interrupts to stop triggering further
    __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	68da      	ldr	r2, [r3, #12]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0220 	bic.w	r2, r2, #32
 8000bca:	60da      	str	r2, [r3, #12]

    // Optionally, reset UART (if needed)
    __HAL_UART_CLEAR_OREFLAG(huart);
 8000bcc:	2300      	movs	r3, #0
 8000bce:	617b      	str	r3, [r7, #20]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697b      	ldr	r3, [r7, #20]
    __HAL_UART_CLEAR_NEFLAG(huart);
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	613b      	str	r3, [r7, #16]
 8000bf6:	693b      	ldr	r3, [r7, #16]
    __HAL_UART_CLEAR_FEFLAG(huart);
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_UART_CLEAR_PEFLAG(huart);
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]

    // Re-enable UART for reception
    HAL_UART_Receive_IT(huart, &rover_gga_message[gga_index], 1);
 8000c24:	4b07      	ldr	r3, [pc, #28]	@ (8000c44 <handleUARTError+0x90>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <handleUARTError+0x94>)
 8000c2e:	4413      	add	r3, r2
 8000c30:	2201      	movs	r2, #1
 8000c32:	4619      	mov	r1, r3
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f002 fdf6 	bl	8003826 <HAL_UART_Receive_IT>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	200005e9 	.word	0x200005e9
 8000c48:	20000520 	.word	0x20000520

08000c4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c50:	b672      	cpsid	i
}
 8000c52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <Error_Handler+0x8>

08000c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b10      	ldr	r3, [pc, #64]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	603b      	str	r3, [r7, #0]
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	4a08      	ldr	r2, [pc, #32]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <HAL_MspInit+0x4c>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	@ 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d3c <HAL_SPI_MspInit+0x94>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d134      	bne.n	8000d34 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b1c      	ldr	r3, [pc, #112]	@ (8000d40 <HAL_SPI_MspInit+0x98>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d40 <HAL_SPI_MspInit+0x98>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cda:	4b19      	ldr	r3, [pc, #100]	@ (8000d40 <HAL_SPI_MspInit+0x98>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <HAL_SPI_MspInit+0x98>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a14      	ldr	r2, [pc, #80]	@ (8000d40 <HAL_SPI_MspInit+0x98>)
 8000cf0:	f043 0302 	orr.w	r3, r3, #2
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b12      	ldr	r3, [pc, #72]	@ (8000d40 <HAL_SPI_MspInit+0x98>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8000d02:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8000d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d10:	2303      	movs	r3, #3
 8000d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d14:	2305      	movs	r3, #5
 8000d16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4809      	ldr	r0, [pc, #36]	@ (8000d44 <HAL_SPI_MspInit+0x9c>)
 8000d20:	f000 fb54 	bl	80013cc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	2024      	movs	r0, #36	@ 0x24
 8000d2a:	f000 fa86 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000d2e:	2024      	movs	r0, #36	@ 0x24
 8000d30:	f000 fa9f 	bl	8001272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	@ 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40003800 	.word	0x40003800
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020400 	.word	0x40020400

08000d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a0e      	ldr	r2, [pc, #56]	@ (8000d90 <HAL_TIM_Base_MspInit+0x48>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d115      	bne.n	8000d86 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <HAL_TIM_Base_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	4a0c      	ldr	r2, [pc, #48]	@ (8000d94 <HAL_TIM_Base_MspInit+0x4c>)
 8000d64:	f043 0302 	orr.w	r3, r3, #2
 8000d68:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <HAL_TIM_Base_MspInit+0x4c>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	201d      	movs	r0, #29
 8000d7c:	f000 fa5d 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d80:	201d      	movs	r0, #29
 8000d82:	f000 fa76 	bl	8001272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40000400 	.word	0x40000400
 8000d94:	40023800 	.word	0x40023800

08000d98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	@ 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e2c <HAL_UART_MspInit+0x94>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d133      	bne.n	8000e22 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000e30 <HAL_UART_MspInit+0x98>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	4a1b      	ldr	r2, [pc, #108]	@ (8000e30 <HAL_UART_MspInit+0x98>)
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dca:	4b19      	ldr	r3, [pc, #100]	@ (8000e30 <HAL_UART_MspInit+0x98>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b15      	ldr	r3, [pc, #84]	@ (8000e30 <HAL_UART_MspInit+0x98>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a14      	ldr	r2, [pc, #80]	@ (8000e30 <HAL_UART_MspInit+0x98>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <HAL_UART_MspInit+0x98>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000df2:	230c      	movs	r3, #12
 8000df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e02:	2307      	movs	r3, #7
 8000e04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4809      	ldr	r0, [pc, #36]	@ (8000e34 <HAL_UART_MspInit+0x9c>)
 8000e0e:	f000 fadd 	bl	80013cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2100      	movs	r1, #0
 8000e16:	2026      	movs	r0, #38	@ 0x26
 8000e18:	f000 fa0f 	bl	800123a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e1c:	2026      	movs	r0, #38	@ 0x26
 8000e1e:	f000 fa28 	bl	8001272 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e22:	bf00      	nop
 8000e24:	3728      	adds	r7, #40	@ 0x28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40004400 	.word	0x40004400
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020000 	.word	0x40020000

08000e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <NMI_Handler+0x4>

08000e40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <HardFault_Handler+0x4>

08000e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e4c:	bf00      	nop
 8000e4e:	e7fd      	b.n	8000e4c <MemManage_Handler+0x4>

08000e50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <BusFault_Handler+0x4>

08000e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <UsageFault_Handler+0x4>

08000e60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr

08000e6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e8e:	f000 f8b5 	bl	8000ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f000 fc4e 	bl	800173c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ea8:	4802      	ldr	r0, [pc, #8]	@ (8000eb4 <TIM3_IRQHandler+0x10>)
 8000eaa:	f002 f859 	bl	8002f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000084 	.word	0x20000084

08000eb8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000ebc:	4802      	ldr	r0, [pc, #8]	@ (8000ec8 <SPI2_IRQHandler+0x10>)
 8000ebe:	f001 fd49 	bl	8002954 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000002c 	.word	0x2000002c

08000ecc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ed0:	4802      	ldr	r0, [pc, #8]	@ (8000edc <USART2_IRQHandler+0x10>)
 8000ed2:	f002 fccd 	bl	8003870 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200000cc 	.word	0x200000cc

08000ee0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee4:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <SystemInit+0x20>)
 8000ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eea:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <SystemInit+0x20>)
 8000eec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ef0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef4:	bf00      	nop
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f08:	f7ff ffea 	bl	8000ee0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f0c:	480c      	ldr	r0, [pc, #48]	@ (8000f40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f0e:	490d      	ldr	r1, [pc, #52]	@ (8000f44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f10:	4a0d      	ldr	r2, [pc, #52]	@ (8000f48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f14:	e002      	b.n	8000f1c <LoopCopyDataInit>

08000f16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1a:	3304      	adds	r3, #4

08000f1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f20:	d3f9      	bcc.n	8000f16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f22:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f24:	4c0a      	ldr	r4, [pc, #40]	@ (8000f50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f28:	e001      	b.n	8000f2e <LoopFillZerobss>

08000f2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2c:	3204      	adds	r2, #4

08000f2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f30:	d3fb      	bcc.n	8000f2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f32:	f003 fec9 	bl	8004cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f36:	f7ff fac7 	bl	80004c8 <main>
  bx  lr    
 8000f3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f44:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000f48:	08004d58 	.word	0x08004d58
  ldr r2, =_sbss
 8000f4c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000f50:	200005f4 	.word	0x200005f4

08000f54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC_IRQHandler>
	...

08000f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <HAL_Init+0x40>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a0d      	ldr	r2, [pc, #52]	@ (8000f98 <HAL_Init+0x40>)
 8000f62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f68:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <HAL_Init+0x40>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f98 <HAL_Init+0x40>)
 8000f6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f74:	4b08      	ldr	r3, [pc, #32]	@ (8000f98 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a07      	ldr	r2, [pc, #28]	@ (8000f98 <HAL_Init+0x40>)
 8000f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f94f 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f86:	200f      	movs	r0, #15
 8000f88:	f000 f808 	bl	8000f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f8c:	f7ff fe64 	bl	8000c58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40023c00 	.word	0x40023c00

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa4:	4b12      	ldr	r3, [pc, #72]	@ (8000ff0 <HAL_InitTick+0x54>)
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <HAL_InitTick+0x58>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 f967 	bl	800128e <HAL_SYSTICK_Config>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e00e      	b.n	8000fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2b0f      	cmp	r3, #15
 8000fce:	d80a      	bhi.n	8000fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd8:	f000 f92f 	bl	800123a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fdc:	4a06      	ldr	r2, [pc, #24]	@ (8000ff8 <HAL_InitTick+0x5c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e000      	b.n	8000fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000004 	.word	0x20000004
 8000ff4:	2000000c 	.word	0x2000000c
 8000ff8:	20000008 	.word	0x20000008

08000ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001000:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_IncTick+0x20>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	461a      	mov	r2, r3
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_IncTick+0x24>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4413      	add	r3, r2
 800100c:	4a04      	ldr	r2, [pc, #16]	@ (8001020 <HAL_IncTick+0x24>)
 800100e:	6013      	str	r3, [r2, #0]
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	2000000c 	.word	0x2000000c
 8001020:	200005f0 	.word	0x200005f0

08001024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return uwTick;
 8001028:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <HAL_GetTick+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
}
 800102c:	4618      	mov	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	200005f0 	.word	0x200005f0

0800103c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001044:	f7ff ffee 	bl	8001024 <HAL_GetTick>
 8001048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001054:	d005      	beq.n	8001062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001056:	4b0a      	ldr	r3, [pc, #40]	@ (8001080 <HAL_Delay+0x44>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	461a      	mov	r2, r3
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	4413      	add	r3, r2
 8001060:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001062:	bf00      	nop
 8001064:	f7ff ffde 	bl	8001024 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	68fa      	ldr	r2, [r7, #12]
 8001070:	429a      	cmp	r2, r3
 8001072:	d8f7      	bhi.n	8001064 <HAL_Delay+0x28>
  {
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000000c 	.word	0x2000000c

08001084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f003 0307 	and.w	r3, r3, #7
 8001092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109a:	68ba      	ldr	r2, [r7, #8]
 800109c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a0:	4013      	ands	r3, r2
 80010a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <__NVIC_SetPriorityGrouping+0x44>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d0:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <__NVIC_GetPriorityGrouping+0x18>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	f003 0307 	and.w	r3, r3, #7
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	db0b      	blt.n	8001112 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	f003 021f 	and.w	r2, r3, #31
 8001100:	4907      	ldr	r1, [pc, #28]	@ (8001120 <__NVIC_EnableIRQ+0x38>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	095b      	lsrs	r3, r3, #5
 8001108:	2001      	movs	r0, #1
 800110a:	fa00 f202 	lsl.w	r2, r0, r2
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000e100 	.word	0xe000e100

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	@ (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	@ (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	@ 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	@ 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f7ff ff8e 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff29 	bl	8001084 <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff3e 	bl	80010cc <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff8e 	bl	8001178 <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5d 	bl	8001124 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	4603      	mov	r3, r0
 800127a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800127c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff31 	bl	80010e8 <__NVIC_EnableIRQ>
}
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffa2 	bl	80011e0 <SysTick_Config>
 800129c:	4603      	mov	r3, r0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b084      	sub	sp, #16
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012b4:	f7ff feb6 	bl	8001024 <HAL_GetTick>
 80012b8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d008      	beq.n	80012d8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2280      	movs	r2, #128	@ 0x80
 80012ca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e052      	b.n	800137e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0216 	bic.w	r2, r2, #22
 80012e6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	695a      	ldr	r2, [r3, #20]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012f6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d103      	bne.n	8001308 <HAL_DMA_Abort+0x62>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001304:	2b00      	cmp	r3, #0
 8001306:	d007      	beq.n	8001318 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0208 	bic.w	r2, r2, #8
 8001316:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f022 0201 	bic.w	r2, r2, #1
 8001326:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001328:	e013      	b.n	8001352 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800132a:	f7ff fe7b 	bl	8001024 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b05      	cmp	r3, #5
 8001336:	d90c      	bls.n	8001352 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2220      	movs	r2, #32
 800133c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2203      	movs	r2, #3
 8001342:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e015      	b.n	800137e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	2b00      	cmp	r3, #0
 800135e:	d1e4      	bne.n	800132a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001364:	223f      	movs	r2, #63	@ 0x3f
 8001366:	409a      	lsls	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b02      	cmp	r3, #2
 8001398:	d004      	beq.n	80013a4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2280      	movs	r2, #128	@ 0x80
 800139e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e00c      	b.n	80013be <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2205      	movs	r2, #5
 80013a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 0201 	bic.w	r2, r2, #1
 80013ba:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
	...

080013cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b089      	sub	sp, #36	@ 0x24
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
 80013e6:	e159      	b.n	800169c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013e8:	2201      	movs	r2, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	4013      	ands	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	429a      	cmp	r2, r3
 8001402:	f040 8148 	bne.w	8001696 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b01      	cmp	r3, #1
 8001410:	d005      	beq.n	800141e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800141a:	2b02      	cmp	r3, #2
 800141c:	d130      	bne.n	8001480 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68da      	ldr	r2, [r3, #12]
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	69ba      	ldr	r2, [r7, #24]
 800144c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001454:	2201      	movs	r2, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	f003 0201 	and.w	r2, r3, #1
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4313      	orrs	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b03      	cmp	r3, #3
 800148a:	d017      	beq.n	80014bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d123      	bne.n	8001510 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	08da      	lsrs	r2, r3, #3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3208      	adds	r2, #8
 80014d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	220f      	movs	r2, #15
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	691a      	ldr	r2, [r3, #16]
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f003 0307 	and.w	r3, r3, #7
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	08da      	lsrs	r2, r3, #3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3208      	adds	r2, #8
 800150a:	69b9      	ldr	r1, [r7, #24]
 800150c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0203 	and.w	r2, r3, #3
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80a2 	beq.w	8001696 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b57      	ldr	r3, [pc, #348]	@ (80016b4 <HAL_GPIO_Init+0x2e8>)
 8001558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800155a:	4a56      	ldr	r2, [pc, #344]	@ (80016b4 <HAL_GPIO_Init+0x2e8>)
 800155c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001560:	6453      	str	r3, [r2, #68]	@ 0x44
 8001562:	4b54      	ldr	r3, [pc, #336]	@ (80016b4 <HAL_GPIO_Init+0x2e8>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156e:	4a52      	ldr	r2, [pc, #328]	@ (80016b8 <HAL_GPIO_Init+0x2ec>)
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	089b      	lsrs	r3, r3, #2
 8001574:	3302      	adds	r3, #2
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	220f      	movs	r2, #15
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a49      	ldr	r2, [pc, #292]	@ (80016bc <HAL_GPIO_Init+0x2f0>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d019      	beq.n	80015ce <HAL_GPIO_Init+0x202>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a48      	ldr	r2, [pc, #288]	@ (80016c0 <HAL_GPIO_Init+0x2f4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0x1fe>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a47      	ldr	r2, [pc, #284]	@ (80016c4 <HAL_GPIO_Init+0x2f8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d00d      	beq.n	80015c6 <HAL_GPIO_Init+0x1fa>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a46      	ldr	r2, [pc, #280]	@ (80016c8 <HAL_GPIO_Init+0x2fc>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d007      	beq.n	80015c2 <HAL_GPIO_Init+0x1f6>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4a45      	ldr	r2, [pc, #276]	@ (80016cc <HAL_GPIO_Init+0x300>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d101      	bne.n	80015be <HAL_GPIO_Init+0x1f2>
 80015ba:	2304      	movs	r3, #4
 80015bc:	e008      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015be:	2307      	movs	r3, #7
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015c2:	2303      	movs	r3, #3
 80015c4:	e004      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e002      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_GPIO_Init+0x204>
 80015ce:	2300      	movs	r3, #0
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	f002 0203 	and.w	r2, r2, #3
 80015d6:	0092      	lsls	r2, r2, #2
 80015d8:	4093      	lsls	r3, r2
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e0:	4935      	ldr	r1, [pc, #212]	@ (80016b8 <HAL_GPIO_Init+0x2ec>)
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ee:	4b38      	ldr	r3, [pc, #224]	@ (80016d0 <HAL_GPIO_Init+0x304>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001612:	4a2f      	ldr	r2, [pc, #188]	@ (80016d0 <HAL_GPIO_Init+0x304>)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001618:	4b2d      	ldr	r3, [pc, #180]	@ (80016d0 <HAL_GPIO_Init+0x304>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800163c:	4a24      	ldr	r2, [pc, #144]	@ (80016d0 <HAL_GPIO_Init+0x304>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001642:	4b23      	ldr	r3, [pc, #140]	@ (80016d0 <HAL_GPIO_Init+0x304>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001666:	4a1a      	ldr	r2, [pc, #104]	@ (80016d0 <HAL_GPIO_Init+0x304>)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166c:	4b18      	ldr	r3, [pc, #96]	@ (80016d0 <HAL_GPIO_Init+0x304>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001690:	4a0f      	ldr	r2, [pc, #60]	@ (80016d0 <HAL_GPIO_Init+0x304>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3301      	adds	r3, #1
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	2b0f      	cmp	r3, #15
 80016a0:	f67f aea2 	bls.w	80013e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3724      	adds	r7, #36	@ 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40013800 	.word	0x40013800
 80016bc:	40020000 	.word	0x40020000
 80016c0:	40020400 	.word	0x40020400
 80016c4:	40020800 	.word	0x40020800
 80016c8:	40020c00 	.word	0x40020c00
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40013c00 	.word	0x40013c00

080016d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	460b      	mov	r3, r1
 80016de:	807b      	strh	r3, [r7, #2]
 80016e0:	4613      	mov	r3, r2
 80016e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016e4:	787b      	ldrb	r3, [r7, #1]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d003      	beq.n	80016f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ea:	887a      	ldrh	r2, [r7, #2]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f0:	e003      	b.n	80016fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	041a      	lsls	r2, r3, #16
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001706:	b480      	push	{r7}
 8001708:	b085      	sub	sp, #20
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	460b      	mov	r3, r1
 8001710:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001718:	887a      	ldrh	r2, [r7, #2]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4013      	ands	r3, r2
 800171e:	041a      	lsls	r2, r3, #16
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	43d9      	mvns	r1, r3
 8001724:	887b      	ldrh	r3, [r7, #2]
 8001726:	400b      	ands	r3, r1
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	619a      	str	r2, [r3, #24]
}
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001746:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d006      	beq.n	8001760 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001752:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001754:	88fb      	ldrh	r3, [r7, #6]
 8001756:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	4618      	mov	r0, r3
 800175c:	f000 f806 	bl	800176c <HAL_GPIO_EXTI_Callback>
  }
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40013c00 	.word	0x40013c00

0800176c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e267      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d075      	beq.n	800188e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017a2:	4b88      	ldr	r3, [pc, #544]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d00c      	beq.n	80017c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ae:	4b85      	ldr	r3, [pc, #532]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d112      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ba:	4b82      	ldr	r3, [pc, #520]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017c6:	d10b      	bne.n	80017e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c8:	4b7e      	ldr	r3, [pc, #504]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d05b      	beq.n	800188c <HAL_RCC_OscConfig+0x108>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d157      	bne.n	800188c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e242      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017e8:	d106      	bne.n	80017f8 <HAL_RCC_OscConfig+0x74>
 80017ea:	4b76      	ldr	r3, [pc, #472]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a75      	ldr	r2, [pc, #468]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e01d      	b.n	8001834 <HAL_RCC_OscConfig+0xb0>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001800:	d10c      	bne.n	800181c <HAL_RCC_OscConfig+0x98>
 8001802:	4b70      	ldr	r3, [pc, #448]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a6f      	ldr	r2, [pc, #444]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 8001808:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	4b6d      	ldr	r3, [pc, #436]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a6c      	ldr	r2, [pc, #432]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 8001814:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e00b      	b.n	8001834 <HAL_RCC_OscConfig+0xb0>
 800181c:	4b69      	ldr	r3, [pc, #420]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a68      	ldr	r2, [pc, #416]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 8001822:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001826:	6013      	str	r3, [r2, #0]
 8001828:	4b66      	ldr	r3, [pc, #408]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a65      	ldr	r2, [pc, #404]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 800182e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d013      	beq.n	8001864 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fbf2 	bl	8001024 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001844:	f7ff fbee 	bl	8001024 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	@ 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e207      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	4b5b      	ldr	r3, [pc, #364]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0xc0>
 8001862:	e014      	b.n	800188e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fbde 	bl	8001024 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fbda 	bl	8001024 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	@ 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e1f3      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187e:	4b51      	ldr	r3, [pc, #324]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0xe8>
 800188a:	e000      	b.n	800188e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800188c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d063      	beq.n	8001962 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800189a:	4b4a      	ldr	r3, [pc, #296]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f003 030c 	and.w	r3, r3, #12
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00b      	beq.n	80018be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a6:	4b47      	ldr	r3, [pc, #284]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018ae:	2b08      	cmp	r3, #8
 80018b0:	d11c      	bne.n	80018ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018b2:	4b44      	ldr	r3, [pc, #272]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d116      	bne.n	80018ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018be:	4b41      	ldr	r3, [pc, #260]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_RCC_OscConfig+0x152>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e1c7      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d6:	4b3b      	ldr	r3, [pc, #236]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	691b      	ldr	r3, [r3, #16]
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4937      	ldr	r1, [pc, #220]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ea:	e03a      	b.n	8001962 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d020      	beq.n	8001936 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018f4:	4b34      	ldr	r3, [pc, #208]	@ (80019c8 <HAL_RCC_OscConfig+0x244>)
 80018f6:	2201      	movs	r2, #1
 80018f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fa:	f7ff fb93 	bl	8001024 <HAL_GetTick>
 80018fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001900:	e008      	b.n	8001914 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001902:	f7ff fb8f 	bl	8001024 <HAL_GetTick>
 8001906:	4602      	mov	r2, r0
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	2b02      	cmp	r3, #2
 800190e:	d901      	bls.n	8001914 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001910:	2303      	movs	r3, #3
 8001912:	e1a8      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	4b2b      	ldr	r3, [pc, #172]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0302 	and.w	r3, r3, #2
 800191c:	2b00      	cmp	r3, #0
 800191e:	d0f0      	beq.n	8001902 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001920:	4b28      	ldr	r3, [pc, #160]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4925      	ldr	r1, [pc, #148]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 8001930:	4313      	orrs	r3, r2
 8001932:	600b      	str	r3, [r1, #0]
 8001934:	e015      	b.n	8001962 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001936:	4b24      	ldr	r3, [pc, #144]	@ (80019c8 <HAL_RCC_OscConfig+0x244>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff fb72 	bl	8001024 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001944:	f7ff fb6e 	bl	8001024 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e187      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001956:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d036      	beq.n	80019dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d016      	beq.n	80019a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001976:	4b15      	ldr	r3, [pc, #84]	@ (80019cc <HAL_RCC_OscConfig+0x248>)
 8001978:	2201      	movs	r2, #1
 800197a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff fb52 	bl	8001024 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001984:	f7ff fb4e 	bl	8001024 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e167      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001996:	4b0b      	ldr	r3, [pc, #44]	@ (80019c4 <HAL_RCC_OscConfig+0x240>)
 8001998:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x200>
 80019a2:	e01b      	b.n	80019dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a4:	4b09      	ldr	r3, [pc, #36]	@ (80019cc <HAL_RCC_OscConfig+0x248>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019aa:	f7ff fb3b 	bl	8001024 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b0:	e00e      	b.n	80019d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b2:	f7ff fb37 	bl	8001024 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d907      	bls.n	80019d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e150      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
 80019c4:	40023800 	.word	0x40023800
 80019c8:	42470000 	.word	0x42470000
 80019cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d0:	4b88      	ldr	r3, [pc, #544]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 80019d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1ea      	bne.n	80019b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 8097 	beq.w	8001b18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ea:	2300      	movs	r3, #0
 80019ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ee:	4b81      	ldr	r3, [pc, #516]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d10f      	bne.n	8001a1a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b7d      	ldr	r3, [pc, #500]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a02:	4a7c      	ldr	r2, [pc, #496]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0a:	4b7a      	ldr	r3, [pc, #488]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a16:	2301      	movs	r3, #1
 8001a18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a1a:	4b77      	ldr	r3, [pc, #476]	@ (8001bf8 <HAL_RCC_OscConfig+0x474>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d118      	bne.n	8001a58 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a26:	4b74      	ldr	r3, [pc, #464]	@ (8001bf8 <HAL_RCC_OscConfig+0x474>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a73      	ldr	r2, [pc, #460]	@ (8001bf8 <HAL_RCC_OscConfig+0x474>)
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a32:	f7ff faf7 	bl	8001024 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a3a:	f7ff faf3 	bl	8001024 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e10c      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	4b6a      	ldr	r3, [pc, #424]	@ (8001bf8 <HAL_RCC_OscConfig+0x474>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d106      	bne.n	8001a6e <HAL_RCC_OscConfig+0x2ea>
 8001a60:	4b64      	ldr	r3, [pc, #400]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001a62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a64:	4a63      	ldr	r2, [pc, #396]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a6c:	e01c      	b.n	8001aa8 <HAL_RCC_OscConfig+0x324>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b05      	cmp	r3, #5
 8001a74:	d10c      	bne.n	8001a90 <HAL_RCC_OscConfig+0x30c>
 8001a76:	4b5f      	ldr	r3, [pc, #380]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7a:	4a5e      	ldr	r2, [pc, #376]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a82:	4b5c      	ldr	r3, [pc, #368]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a86:	4a5b      	ldr	r2, [pc, #364]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_OscConfig+0x324>
 8001a90:	4b58      	ldr	r3, [pc, #352]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a94:	4a57      	ldr	r2, [pc, #348]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001a96:	f023 0301 	bic.w	r3, r3, #1
 8001a9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a9c:	4b55      	ldr	r3, [pc, #340]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa0:	4a54      	ldr	r2, [pc, #336]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	f023 0304 	bic.w	r3, r3, #4
 8001aa6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d015      	beq.n	8001adc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab0:	f7ff fab8 	bl	8001024 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab6:	e00a      	b.n	8001ace <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab8:	f7ff fab4 	bl	8001024 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e0cb      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ace:	4b49      	ldr	r3, [pc, #292]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0ee      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x334>
 8001ada:	e014      	b.n	8001b06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001adc:	f7ff faa2 	bl	8001024 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae2:	e00a      	b.n	8001afa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae4:	f7ff fa9e 	bl	8001024 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e0b5      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afa:	4b3e      	ldr	r3, [pc, #248]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1ee      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b06:	7dfb      	ldrb	r3, [r7, #23]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d105      	bne.n	8001b18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b0c:	4b39      	ldr	r3, [pc, #228]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	4a38      	ldr	r2, [pc, #224]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 80a1 	beq.w	8001c64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b22:	4b34      	ldr	r3, [pc, #208]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d05c      	beq.n	8001be8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d141      	bne.n	8001bba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b36:	4b31      	ldr	r3, [pc, #196]	@ (8001bfc <HAL_RCC_OscConfig+0x478>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fa72 	bl	8001024 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7ff fa6e 	bl	8001024 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e087      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b56:	4b27      	ldr	r3, [pc, #156]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f0      	bne.n	8001b44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69da      	ldr	r2, [r3, #28]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b70:	019b      	lsls	r3, r3, #6
 8001b72:	431a      	orrs	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b78:	085b      	lsrs	r3, r3, #1
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	041b      	lsls	r3, r3, #16
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b84:	061b      	lsls	r3, r3, #24
 8001b86:	491b      	ldr	r1, [pc, #108]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001bfc <HAL_RCC_OscConfig+0x478>)
 8001b8e:	2201      	movs	r2, #1
 8001b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b92:	f7ff fa47 	bl	8001024 <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7ff fa43 	bl	8001024 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e05c      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bac:	4b11      	ldr	r3, [pc, #68]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f0      	beq.n	8001b9a <HAL_RCC_OscConfig+0x416>
 8001bb8:	e054      	b.n	8001c64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bba:	4b10      	ldr	r3, [pc, #64]	@ (8001bfc <HAL_RCC_OscConfig+0x478>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fa30 	bl	8001024 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff fa2c 	bl	8001024 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e045      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bda:	4b06      	ldr	r3, [pc, #24]	@ (8001bf4 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x444>
 8001be6:	e03d      	b.n	8001c64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d107      	bne.n	8001c00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e038      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c00:	4b1b      	ldr	r3, [pc, #108]	@ (8001c70 <HAL_RCC_OscConfig+0x4ec>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d028      	beq.n	8001c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d121      	bne.n	8001c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d11a      	bne.n	8001c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c30:	4013      	ands	r3, r2
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d111      	bne.n	8001c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c46:	085b      	lsrs	r3, r3, #1
 8001c48:	3b01      	subs	r3, #1
 8001c4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800

08001c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e0cc      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c88:	4b68      	ldr	r3, [pc, #416]	@ (8001e2c <HAL_RCC_ClockConfig+0x1b8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0307 	and.w	r3, r3, #7
 8001c90:	683a      	ldr	r2, [r7, #0]
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d90c      	bls.n	8001cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c96:	4b65      	ldr	r3, [pc, #404]	@ (8001e2c <HAL_RCC_ClockConfig+0x1b8>)
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	b2d2      	uxtb	r2, r2
 8001c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c9e:	4b63      	ldr	r3, [pc, #396]	@ (8001e2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d001      	beq.n	8001cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0b8      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d020      	beq.n	8001cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cc8:	4b59      	ldr	r3, [pc, #356]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	4a58      	ldr	r2, [pc, #352]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0308 	and.w	r3, r3, #8
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ce0:	4b53      	ldr	r3, [pc, #332]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4a52      	ldr	r2, [pc, #328]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cec:	4b50      	ldr	r3, [pc, #320]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	494d      	ldr	r1, [pc, #308]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d044      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	4b47      	ldr	r3, [pc, #284]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d119      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e07f      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d003      	beq.n	8001d32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d107      	bne.n	8001d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d32:	4b3f      	ldr	r3, [pc, #252]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d109      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e06f      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d42:	4b3b      	ldr	r3, [pc, #236]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e067      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d52:	4b37      	ldr	r3, [pc, #220]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f023 0203 	bic.w	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	4934      	ldr	r1, [pc, #208]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d64:	f7ff f95e 	bl	8001024 <HAL_GetTick>
 8001d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d6a:	e00a      	b.n	8001d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d6c:	f7ff f95a 	bl	8001024 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e04f      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d82:	4b2b      	ldr	r3, [pc, #172]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 020c 	and.w	r2, r3, #12
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d1eb      	bne.n	8001d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d94:	4b25      	ldr	r3, [pc, #148]	@ (8001e2c <HAL_RCC_ClockConfig+0x1b8>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d20c      	bcs.n	8001dbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b22      	ldr	r3, [pc, #136]	@ (8001e2c <HAL_RCC_ClockConfig+0x1b8>)
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001daa:	4b20      	ldr	r3, [pc, #128]	@ (8001e2c <HAL_RCC_ClockConfig+0x1b8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d001      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e032      	b.n	8001e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0304 	and.w	r3, r3, #4
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc8:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	4916      	ldr	r1, [pc, #88]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d009      	beq.n	8001dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001de6:	4b12      	ldr	r3, [pc, #72]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	490e      	ldr	r1, [pc, #56]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dfa:	f000 f821 	bl	8001e40 <HAL_RCC_GetSysClockFreq>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	4b0b      	ldr	r3, [pc, #44]	@ (8001e30 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	091b      	lsrs	r3, r3, #4
 8001e06:	f003 030f 	and.w	r3, r3, #15
 8001e0a:	490a      	ldr	r1, [pc, #40]	@ (8001e34 <HAL_RCC_ClockConfig+0x1c0>)
 8001e0c:	5ccb      	ldrb	r3, [r1, r3]
 8001e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e12:	4a09      	ldr	r2, [pc, #36]	@ (8001e38 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e16:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_RCC_ClockConfig+0x1c8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff f8be 	bl	8000f9c <HAL_InitTick>

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023c00 	.word	0x40023c00
 8001e30:	40023800 	.word	0x40023800
 8001e34:	08004d30 	.word	0x08004d30
 8001e38:	20000004 	.word	0x20000004
 8001e3c:	20000008 	.word	0x20000008

08001e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e44:	b090      	sub	sp, #64	@ 0x40
 8001e46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e58:	4b59      	ldr	r3, [pc, #356]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f003 030c 	and.w	r3, r3, #12
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d00d      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x40>
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	f200 80a1 	bhi.w	8001fac <HAL_RCC_GetSysClockFreq+0x16c>
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x34>
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e72:	e09b      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e74:	4b53      	ldr	r3, [pc, #332]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e78:	e09b      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e7a:	4b53      	ldr	r3, [pc, #332]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001e7e:	e098      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e80:	4b4f      	ldr	r3, [pc, #316]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e88:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e8a:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d028      	beq.n	8001ee8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e96:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	099b      	lsrs	r3, r3, #6
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	623b      	str	r3, [r7, #32]
 8001ea0:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ea2:	6a3b      	ldr	r3, [r7, #32]
 8001ea4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4b47      	ldr	r3, [pc, #284]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001eac:	fb03 f201 	mul.w	r2, r3, r1
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	fb00 f303 	mul.w	r3, r0, r3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	4a43      	ldr	r2, [pc, #268]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001eba:	fba0 1202 	umull	r1, r2, r0, r2
 8001ebe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ec0:	460a      	mov	r2, r1
 8001ec2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001ec4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ec6:	4413      	add	r3, r2
 8001ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ecc:	2200      	movs	r2, #0
 8001ece:	61bb      	str	r3, [r7, #24]
 8001ed0:	61fa      	str	r2, [r7, #28]
 8001ed2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ed6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001eda:	f7fe f97d 	bl	80001d8 <__aeabi_uldivmod>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ee6:	e053      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee8:	4b35      	ldr	r3, [pc, #212]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	099b      	lsrs	r3, r3, #6
 8001eee:	2200      	movs	r2, #0
 8001ef0:	613b      	str	r3, [r7, #16]
 8001ef2:	617a      	str	r2, [r7, #20]
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001efa:	f04f 0b00 	mov.w	fp, #0
 8001efe:	4652      	mov	r2, sl
 8001f00:	465b      	mov	r3, fp
 8001f02:	f04f 0000 	mov.w	r0, #0
 8001f06:	f04f 0100 	mov.w	r1, #0
 8001f0a:	0159      	lsls	r1, r3, #5
 8001f0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f10:	0150      	lsls	r0, r2, #5
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	ebb2 080a 	subs.w	r8, r2, sl
 8001f1a:	eb63 090b 	sbc.w	r9, r3, fp
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	f04f 0300 	mov.w	r3, #0
 8001f26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f32:	ebb2 0408 	subs.w	r4, r2, r8
 8001f36:	eb63 0509 	sbc.w	r5, r3, r9
 8001f3a:	f04f 0200 	mov.w	r2, #0
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	00eb      	lsls	r3, r5, #3
 8001f44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f48:	00e2      	lsls	r2, r4, #3
 8001f4a:	4614      	mov	r4, r2
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	eb14 030a 	adds.w	r3, r4, sl
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	eb45 030b 	adc.w	r3, r5, fp
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f66:	4629      	mov	r1, r5
 8001f68:	028b      	lsls	r3, r1, #10
 8001f6a:	4621      	mov	r1, r4
 8001f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f70:	4621      	mov	r1, r4
 8001f72:	028a      	lsls	r2, r1, #10
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	60fa      	str	r2, [r7, #12]
 8001f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f84:	f7fe f928 	bl	80001d8 <__aeabi_uldivmod>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001f90:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001fa0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001faa:	e002      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3740      	adds	r7, #64	@ 0x40
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	00f42400 	.word	0x00f42400
 8001fc8:	017d7840 	.word	0x017d7840

08001fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd0:	4b03      	ldr	r3, [pc, #12]	@ (8001fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
 8001fde:	bf00      	nop
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fe8:	f7ff fff0 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	0a9b      	lsrs	r3, r3, #10
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	4903      	ldr	r1, [pc, #12]	@ (8002008 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ffa:	5ccb      	ldrb	r3, [r1, r3]
 8001ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002000:	4618      	mov	r0, r3
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40023800 	.word	0x40023800
 8002008:	08004d40 	.word	0x08004d40

0800200c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002010:	f7ff ffdc 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b05      	ldr	r3, [pc, #20]	@ (800202c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0b5b      	lsrs	r3, r3, #13
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4903      	ldr	r1, [pc, #12]	@ (8002030 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	08004d40 	.word	0x08004d40

08002034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e07b      	b.n	800213e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204a:	2b00      	cmp	r3, #0
 800204c:	d108      	bne.n	8002060 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002056:	d009      	beq.n	800206c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	61da      	str	r2, [r3, #28]
 800205e:	e005      	b.n	800206c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d106      	bne.n	800208c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7fe fe0e 	bl	8000ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80020b4:	431a      	orrs	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	431a      	orrs	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f0:	ea42 0103 	orr.w	r1, r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	0c1b      	lsrs	r3, r3, #16
 800210a:	f003 0104 	and.w	r1, r3, #4
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002112:	f003 0210 	and.w	r2, r3, #16
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	69da      	ldr	r2, [r3, #28]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800212c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002146:	b580      	push	{r7, lr}
 8002148:	b088      	sub	sp, #32
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	603b      	str	r3, [r7, #0]
 8002152:	4613      	mov	r3, r2
 8002154:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002156:	f7fe ff65 	bl	8001024 <HAL_GetTick>
 800215a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b01      	cmp	r3, #1
 800216a:	d001      	beq.n	8002170 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800216c:	2302      	movs	r3, #2
 800216e:	e12a      	b.n	80023c6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_SPI_Transmit+0x36>
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e122      	b.n	80023c6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_SPI_Transmit+0x48>
 800218a:	2302      	movs	r3, #2
 800218c:	e11b      	b.n	80023c6 <HAL_SPI_Transmit+0x280>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2203      	movs	r2, #3
 800219a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	68ba      	ldr	r2, [r7, #8]
 80021a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	88fa      	ldrh	r2, [r7, #6]
 80021ae:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	88fa      	ldrh	r2, [r7, #6]
 80021b4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	2200      	movs	r2, #0
 80021c0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021dc:	d10f      	bne.n	80021fe <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80021ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80021fc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002208:	2b40      	cmp	r3, #64	@ 0x40
 800220a:	d007      	beq.n	800221c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800221a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002224:	d152      	bne.n	80022cc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d002      	beq.n	8002234 <HAL_SPI_Transmit+0xee>
 800222e:	8b7b      	ldrh	r3, [r7, #26]
 8002230:	2b01      	cmp	r3, #1
 8002232:	d145      	bne.n	80022c0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002238:	881a      	ldrh	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002244:	1c9a      	adds	r2, r3, #2
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002258:	e032      	b.n	80022c0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b02      	cmp	r3, #2
 8002266:	d112      	bne.n	800228e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226c:	881a      	ldrh	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	1c9a      	adds	r2, r3, #2
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800228c:	e018      	b.n	80022c0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800228e:	f7fe fec9 	bl	8001024 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d803      	bhi.n	80022a6 <HAL_SPI_Transmit+0x160>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d102      	bne.n	80022ac <HAL_SPI_Transmit+0x166>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d109      	bne.n	80022c0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e082      	b.n	80023c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1c7      	bne.n	800225a <HAL_SPI_Transmit+0x114>
 80022ca:	e053      	b.n	8002374 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <HAL_SPI_Transmit+0x194>
 80022d4:	8b7b      	ldrh	r3, [r7, #26]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d147      	bne.n	800236a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	330c      	adds	r3, #12
 80022e4:	7812      	ldrb	r2, [r2, #0]
 80022e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002300:	e033      	b.n	800236a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b02      	cmp	r3, #2
 800230e:	d113      	bne.n	8002338 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	330c      	adds	r3, #12
 800231a:	7812      	ldrb	r2, [r2, #0]
 800231c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002336:	e018      	b.n	800236a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002338:	f7fe fe74 	bl	8001024 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d803      	bhi.n	8002350 <HAL_SPI_Transmit+0x20a>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234e:	d102      	bne.n	8002356 <HAL_SPI_Transmit+0x210>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d109      	bne.n	800236a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e02d      	b.n	80023c6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1c6      	bne.n	8002302 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	6839      	ldr	r1, [r7, #0]
 8002378:	68f8      	ldr	r0, [r7, #12]
 800237a:	f000 fceb 	bl	8002d54 <SPI_EndRxTxTransaction>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10a      	bne.n	80023a8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80023c4:	2300      	movs	r3, #0
  }
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b088      	sub	sp, #32
 80023d2:	af02      	add	r7, sp, #8
 80023d4:	60f8      	str	r0, [r7, #12]
 80023d6:	60b9      	str	r1, [r7, #8]
 80023d8:	603b      	str	r3, [r7, #0]
 80023da:	4613      	mov	r3, r2
 80023dc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d001      	beq.n	80023ee <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80023ea:	2302      	movs	r3, #2
 80023ec:	e104      	b.n	80025f8 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80023f6:	d112      	bne.n	800241e <HAL_SPI_Receive+0x50>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10e      	bne.n	800241e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2204      	movs	r2, #4
 8002404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002408:	88fa      	ldrh	r2, [r7, #6]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	9300      	str	r3, [sp, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	68b9      	ldr	r1, [r7, #8]
 8002414:	68f8      	ldr	r0, [r7, #12]
 8002416:	f000 f8f3 	bl	8002600 <HAL_SPI_TransmitReceive>
 800241a:	4603      	mov	r3, r0
 800241c:	e0ec      	b.n	80025f8 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800241e:	f7fe fe01 	bl	8001024 <HAL_GetTick>
 8002422:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d002      	beq.n	8002430 <HAL_SPI_Receive+0x62>
 800242a:	88fb      	ldrh	r3, [r7, #6]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0e1      	b.n	80025f8 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_SPI_Receive+0x74>
 800243e:	2302      	movs	r3, #2
 8002440:	e0da      	b.n	80025f8 <HAL_SPI_Receive+0x22a>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2204      	movs	r2, #4
 800244e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	88fa      	ldrh	r2, [r7, #6]
 8002462:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	88fa      	ldrh	r2, [r7, #6]
 8002468:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002490:	d10f      	bne.n	80024b2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80024b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024bc:	2b40      	cmp	r3, #64	@ 0x40
 80024be:	d007      	beq.n	80024d0 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d170      	bne.n	80025ba <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80024d8:	e035      	b.n	8002546 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0301 	and.w	r3, r3, #1
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d115      	bne.n	8002514 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f103 020c 	add.w	r2, r3, #12
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f4:	7812      	ldrb	r2, [r2, #0]
 80024f6:	b2d2      	uxtb	r2, r2
 80024f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002508:	b29b      	uxth	r3, r3
 800250a:	3b01      	subs	r3, #1
 800250c:	b29a      	uxth	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002512:	e018      	b.n	8002546 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002514:	f7fe fd86 	bl	8001024 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d803      	bhi.n	800252c <HAL_SPI_Receive+0x15e>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252a:	d102      	bne.n	8002532 <HAL_SPI_Receive+0x164>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d109      	bne.n	8002546 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e058      	b.n	80025f8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1c4      	bne.n	80024da <HAL_SPI_Receive+0x10c>
 8002550:	e038      	b.n	80025c4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d113      	bne.n	8002588 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256a:	b292      	uxth	r2, r2
 800256c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002572:	1c9a      	adds	r2, r3, #2
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002586:	e018      	b.n	80025ba <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002588:	f7fe fd4c 	bl	8001024 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d803      	bhi.n	80025a0 <HAL_SPI_Receive+0x1d2>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259e:	d102      	bne.n	80025a6 <HAL_SPI_Receive+0x1d8>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d109      	bne.n	80025ba <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e01e      	b.n	80025f8 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1c6      	bne.n	8002552 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	6839      	ldr	r1, [r7, #0]
 80025c8:	68f8      	ldr	r0, [r7, #12]
 80025ca:	f000 fb5d 	bl	8002c88 <SPI_EndRxTransaction>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d002      	beq.n	80025da <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80025f6:	2300      	movs	r3, #0
  }
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	@ 0x28
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800260e:	2301      	movs	r3, #1
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002612:	f7fe fd07 	bl	8001024 <HAL_GetTick>
 8002616:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800261e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800262a:	7ffb      	ldrb	r3, [r7, #31]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d00c      	beq.n	800264a <HAL_SPI_TransmitReceive+0x4a>
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002636:	d106      	bne.n	8002646 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <HAL_SPI_TransmitReceive+0x46>
 8002640:	7ffb      	ldrb	r3, [r7, #31]
 8002642:	2b04      	cmp	r3, #4
 8002644:	d001      	beq.n	800264a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002646:	2302      	movs	r3, #2
 8002648:	e17f      	b.n	800294a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d005      	beq.n	800265c <HAL_SPI_TransmitReceive+0x5c>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_SPI_TransmitReceive+0x5c>
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e174      	b.n	800294a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002666:	2b01      	cmp	r3, #1
 8002668:	d101      	bne.n	800266e <HAL_SPI_TransmitReceive+0x6e>
 800266a:	2302      	movs	r3, #2
 800266c:	e16d      	b.n	800294a <HAL_SPI_TransmitReceive+0x34a>
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2201      	movs	r2, #1
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b04      	cmp	r3, #4
 8002680:	d003      	beq.n	800268a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2205      	movs	r2, #5
 8002686:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2200      	movs	r2, #0
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	887a      	ldrh	r2, [r7, #2]
 800269a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	887a      	ldrh	r2, [r7, #2]
 80026a0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	887a      	ldrh	r2, [r7, #2]
 80026ac:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	887a      	ldrh	r2, [r7, #2]
 80026b2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ca:	2b40      	cmp	r3, #64	@ 0x40
 80026cc:	d007      	beq.n	80026de <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026e6:	d17e      	bne.n	80027e6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <HAL_SPI_TransmitReceive+0xf6>
 80026f0:	8afb      	ldrh	r3, [r7, #22]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d16c      	bne.n	80027d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fa:	881a      	ldrh	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	1c9a      	adds	r2, r3, #2
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800271a:	e059      	b.n	80027d0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b02      	cmp	r3, #2
 8002728:	d11b      	bne.n	8002762 <HAL_SPI_TransmitReceive+0x162>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	d016      	beq.n	8002762 <HAL_SPI_TransmitReceive+0x162>
 8002734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002736:	2b01      	cmp	r3, #1
 8002738:	d113      	bne.n	8002762 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	881a      	ldrh	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	1c9a      	adds	r2, r3, #2
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002754:	b29b      	uxth	r3, r3
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d119      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x1a4>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002774:	b29b      	uxth	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d014      	beq.n	80027a4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002784:	b292      	uxth	r2, r2
 8002786:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800278c:	1c9a      	adds	r2, r3, #2
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027a0:	2301      	movs	r3, #1
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80027a4:	f7fe fc3e 	bl	8001024 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	6a3b      	ldr	r3, [r7, #32]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d80d      	bhi.n	80027d0 <HAL_SPI_TransmitReceive+0x1d0>
 80027b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ba:	d009      	beq.n	80027d0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e0bc      	b.n	800294a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1a0      	bne.n	800271c <HAL_SPI_TransmitReceive+0x11c>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027de:	b29b      	uxth	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d19b      	bne.n	800271c <HAL_SPI_TransmitReceive+0x11c>
 80027e4:	e082      	b.n	80028ec <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_SPI_TransmitReceive+0x1f4>
 80027ee:	8afb      	ldrh	r3, [r7, #22]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d171      	bne.n	80028d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	330c      	adds	r3, #12
 80027fe:	7812      	ldrb	r2, [r2, #0]
 8002800:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002810:	b29b      	uxth	r3, r3
 8002812:	3b01      	subs	r3, #1
 8002814:	b29a      	uxth	r2, r3
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800281a:	e05d      	b.n	80028d8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b02      	cmp	r3, #2
 8002828:	d11c      	bne.n	8002864 <HAL_SPI_TransmitReceive+0x264>
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800282e:	b29b      	uxth	r3, r3
 8002830:	2b00      	cmp	r3, #0
 8002832:	d017      	beq.n	8002864 <HAL_SPI_TransmitReceive+0x264>
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	2b01      	cmp	r3, #1
 8002838:	d114      	bne.n	8002864 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	330c      	adds	r3, #12
 8002844:	7812      	ldrb	r2, [r2, #0]
 8002846:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002856:	b29b      	uxth	r3, r3
 8002858:	3b01      	subs	r3, #1
 800285a:	b29a      	uxth	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d119      	bne.n	80028a6 <HAL_SPI_TransmitReceive+0x2a6>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002876:	b29b      	uxth	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d014      	beq.n	80028a6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002886:	b2d2      	uxtb	r2, r2
 8002888:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002898:	b29b      	uxth	r3, r3
 800289a:	3b01      	subs	r3, #1
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80028a2:	2301      	movs	r3, #1
 80028a4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80028a6:	f7fe fbbd 	bl	8001024 <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	6a3b      	ldr	r3, [r7, #32]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d803      	bhi.n	80028be <HAL_SPI_TransmitReceive+0x2be>
 80028b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d102      	bne.n	80028c4 <HAL_SPI_TransmitReceive+0x2c4>
 80028be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e038      	b.n	800294a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d19c      	bne.n	800281c <HAL_SPI_TransmitReceive+0x21c>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d197      	bne.n	800281c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80028ec:	6a3a      	ldr	r2, [r7, #32]
 80028ee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f000 fa2f 	bl	8002d54 <SPI_EndRxTxTransaction>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d008      	beq.n	800290e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2220      	movs	r2, #32
 8002900:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e01d      	b.n	800294a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10a      	bne.n	800292c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002916:	2300      	movs	r3, #0
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002948:	2300      	movs	r3, #0
  }
}
 800294a:	4618      	mov	r0, r3
 800294c:	3728      	adds	r7, #40	@ 0x28
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b088      	sub	sp, #32
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10e      	bne.n	8002994 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800297c:	2b00      	cmp	r3, #0
 800297e:	d009      	beq.n	8002994 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d004      	beq.n	8002994 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	4798      	blx	r3
    return;
 8002992:	e0ce      	b.n	8002b32 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d009      	beq.n	80029b2 <HAL_SPI_IRQHandler+0x5e>
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d004      	beq.n	80029b2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	4798      	blx	r3
    return;
 80029b0:	e0bf      	b.n	8002b32 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	f003 0320 	and.w	r3, r3, #32
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <HAL_SPI_IRQHandler+0x7e>
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d105      	bne.n	80029d2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80b0 	beq.w	8002b32 <HAL_SPI_IRQHandler+0x1de>
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	f003 0320 	and.w	r3, r3, #32
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80aa 	beq.w	8002b32 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d023      	beq.n	8002a30 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d011      	beq.n	8002a18 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029f8:	f043 0204 	orr.w	r2, r3, #4
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a00:	2300      	movs	r3, #0
 8002a02:	617b      	str	r3, [r7, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	e00b      	b.n	8002a30 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68db      	ldr	r3, [r3, #12]
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]
        return;
 8002a2e:	e080      	b.n	8002b32 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 0320 	and.w	r3, r3, #32
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d014      	beq.n	8002a64 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3e:	f043 0201 	orr.w	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00c      	beq.n	8002a88 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a72:	f043 0208 	orr.w	r2, r3, #8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d04f      	beq.n	8002b30 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a9e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d104      	bne.n	8002abc <HAL_SPI_IRQHandler+0x168>
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d034      	beq.n	8002b26 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0203 	bic.w	r2, r2, #3
 8002aca:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d011      	beq.n	8002af8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad8:	4a17      	ldr	r2, [pc, #92]	@ (8002b38 <HAL_SPI_IRQHandler+0x1e4>)
 8002ada:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe fc50 	bl	8001386 <HAL_DMA_Abort_IT>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002af0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d016      	beq.n	8002b2e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b04:	4a0c      	ldr	r2, [pc, #48]	@ (8002b38 <HAL_SPI_IRQHandler+0x1e4>)
 8002b06:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe fc3a 	bl	8001386 <HAL_DMA_Abort_IT>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b1c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8002b24:	e003      	b.n	8002b2e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f808 	bl	8002b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002b2c:	e000      	b.n	8002b30 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002b2e:	bf00      	nop
    return;
 8002b30:	bf00      	nop
  }
}
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	08002b51 	.word	0x08002b51

08002b3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2200      	movs	r2, #0
 8002b62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f7ff ffe6 	bl	8002b3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002b70:	bf00      	nop
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b088      	sub	sp, #32
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	603b      	str	r3, [r7, #0]
 8002b84:	4613      	mov	r3, r2
 8002b86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b88:	f7fe fa4c 	bl	8001024 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b90:	1a9b      	subs	r3, r3, r2
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	4413      	add	r3, r2
 8002b96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b98:	f7fe fa44 	bl	8001024 <HAL_GetTick>
 8002b9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b9e:	4b39      	ldr	r3, [pc, #228]	@ (8002c84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	015b      	lsls	r3, r3, #5
 8002ba4:	0d1b      	lsrs	r3, r3, #20
 8002ba6:	69fa      	ldr	r2, [r7, #28]
 8002ba8:	fb02 f303 	mul.w	r3, r2, r3
 8002bac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bae:	e054      	b.n	8002c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb6:	d050      	beq.n	8002c5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bb8:	f7fe fa34 	bl	8001024 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d902      	bls.n	8002bce <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d13d      	bne.n	8002c4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002bdc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002be6:	d111      	bne.n	8002c0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002bf0:	d004      	beq.n	8002bfc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bfa:	d107      	bne.n	8002c0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c14:	d10f      	bne.n	8002c36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e017      	b.n	8002c7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d101      	bne.n	8002c54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4013      	ands	r3, r2
 8002c64:	68ba      	ldr	r2, [r7, #8]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	bf0c      	ite	eq
 8002c6a:	2301      	moveq	r3, #1
 8002c6c:	2300      	movne	r3, #0
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	79fb      	ldrb	r3, [r7, #7]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d19b      	bne.n	8002bb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000004 	.word	0x20000004

08002c88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af02      	add	r7, sp, #8
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c9c:	d111      	bne.n	8002cc2 <SPI_EndRxTransaction+0x3a>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ca6:	d004      	beq.n	8002cb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cb0:	d107      	bne.n	8002cc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002cc0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cca:	d12a      	bne.n	8002d22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cd4:	d012      	beq.n	8002cfc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	9300      	str	r3, [sp, #0]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	2180      	movs	r1, #128	@ 0x80
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f7ff ff49 	bl	8002b78 <SPI_WaitFlagStateUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d02d      	beq.n	8002d48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf0:	f043 0220 	orr.w	r2, r3, #32
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e026      	b.n	8002d4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2200      	movs	r2, #0
 8002d04:	2101      	movs	r1, #1
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f7ff ff36 	bl	8002b78 <SPI_WaitFlagStateUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01a      	beq.n	8002d48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d16:	f043 0220 	orr.w	r2, r3, #32
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e013      	b.n	8002d4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7ff ff23 	bl	8002b78 <SPI_WaitFlagStateUntilTimeout>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d007      	beq.n	8002d48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e000      	b.n	8002d4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2201      	movs	r2, #1
 8002d68:	2102      	movs	r1, #2
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f7ff ff04 	bl	8002b78 <SPI_WaitFlagStateUntilTimeout>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d007      	beq.n	8002d86 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7a:	f043 0220 	orr.w	r2, r3, #32
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e032      	b.n	8002dec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d86:	4b1b      	ldr	r3, [pc, #108]	@ (8002df4 <SPI_EndRxTxTransaction+0xa0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1b      	ldr	r2, [pc, #108]	@ (8002df8 <SPI_EndRxTxTransaction+0xa4>)
 8002d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d90:	0d5b      	lsrs	r3, r3, #21
 8002d92:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002d96:	fb02 f303 	mul.w	r3, r2, r3
 8002d9a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002da4:	d112      	bne.n	8002dcc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	9300      	str	r3, [sp, #0]
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2200      	movs	r2, #0
 8002dae:	2180      	movs	r1, #128	@ 0x80
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f7ff fee1 	bl	8002b78 <SPI_WaitFlagStateUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d016      	beq.n	8002dea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc0:	f043 0220 	orr.w	r2, r3, #32
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e00f      	b.n	8002dec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de2:	2b80      	cmp	r3, #128	@ 0x80
 8002de4:	d0f2      	beq.n	8002dcc <SPI_EndRxTxTransaction+0x78>
 8002de6:	e000      	b.n	8002dea <SPI_EndRxTxTransaction+0x96>
        break;
 8002de8:	bf00      	nop
  }

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	20000004 	.word	0x20000004
 8002df8:	165e9f81 	.word	0x165e9f81

08002dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e041      	b.n	8002e92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fd ff90 	bl	8000d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	f000 fa70 	bl	8003320 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
	...

08002e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d001      	beq.n	8002eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e044      	b.n	8002f3e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1e      	ldr	r2, [pc, #120]	@ (8002f4c <HAL_TIM_Base_Start_IT+0xb0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d018      	beq.n	8002f08 <HAL_TIM_Base_Start_IT+0x6c>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ede:	d013      	beq.n	8002f08 <HAL_TIM_Base_Start_IT+0x6c>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8002f50 <HAL_TIM_Base_Start_IT+0xb4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d00e      	beq.n	8002f08 <HAL_TIM_Base_Start_IT+0x6c>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a19      	ldr	r2, [pc, #100]	@ (8002f54 <HAL_TIM_Base_Start_IT+0xb8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d009      	beq.n	8002f08 <HAL_TIM_Base_Start_IT+0x6c>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a17      	ldr	r2, [pc, #92]	@ (8002f58 <HAL_TIM_Base_Start_IT+0xbc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d004      	beq.n	8002f08 <HAL_TIM_Base_Start_IT+0x6c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a16      	ldr	r2, [pc, #88]	@ (8002f5c <HAL_TIM_Base_Start_IT+0xc0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d111      	bne.n	8002f2c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 0307 	and.w	r3, r3, #7
 8002f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2b06      	cmp	r3, #6
 8002f18:	d010      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f042 0201 	orr.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f2a:	e007      	b.n	8002f3c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f042 0201 	orr.w	r2, r2, #1
 8002f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3714      	adds	r7, #20
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40010000 	.word	0x40010000
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40000800 	.word	0x40000800
 8002f58:	40000c00 	.word	0x40000c00
 8002f5c:	40014000 	.word	0x40014000

08002f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d020      	beq.n	8002fc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d01b      	beq.n	8002fc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0202 	mvn.w	r2, #2
 8002f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f999 	bl	80032e2 <HAL_TIM_IC_CaptureCallback>
 8002fb0:	e005      	b.n	8002fbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f98b 	bl	80032ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f99c 	bl	80032f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d020      	beq.n	8003010 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d01b      	beq.n	8003010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0204 	mvn.w	r2, #4
 8002fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2202      	movs	r2, #2
 8002fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d003      	beq.n	8002ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f973 	bl	80032e2 <HAL_TIM_IC_CaptureCallback>
 8002ffc:	e005      	b.n	800300a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f965 	bl	80032ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f976 	bl	80032f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d020      	beq.n	800305c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d01b      	beq.n	800305c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f06f 0208 	mvn.w	r2, #8
 800302c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2204      	movs	r2, #4
 8003032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f94d 	bl	80032e2 <HAL_TIM_IC_CaptureCallback>
 8003048:	e005      	b.n	8003056 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 f93f 	bl	80032ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f950 	bl	80032f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	2b00      	cmp	r3, #0
 8003064:	d020      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01b      	beq.n	80030a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f06f 0210 	mvn.w	r2, #16
 8003078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2208      	movs	r2, #8
 800307e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f927 	bl	80032e2 <HAL_TIM_IC_CaptureCallback>
 8003094:	e005      	b.n	80030a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f919 	bl	80032ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f92a 	bl	80032f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00c      	beq.n	80030cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0201 	mvn.w	r2, #1
 80030c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fd fcc2 	bl	8000a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00c      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d007      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 fab6 	bl	800365c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00c      	beq.n	8003114 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d007      	beq.n	8003114 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800310c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f8fb 	bl	800330a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00c      	beq.n	8003138 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 0320 	and.w	r3, r3, #32
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f06f 0220 	mvn.w	r2, #32
 8003130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fa88 	bl	8003648 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003138:	bf00      	nop
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_TIM_ConfigClockSource+0x1c>
 8003158:	2302      	movs	r3, #2
 800315a:	e0b4      	b.n	80032c6 <HAL_TIM_ConfigClockSource+0x186>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800317a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003182:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003194:	d03e      	beq.n	8003214 <HAL_TIM_ConfigClockSource+0xd4>
 8003196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800319a:	f200 8087 	bhi.w	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 800319e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031a2:	f000 8086 	beq.w	80032b2 <HAL_TIM_ConfigClockSource+0x172>
 80031a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031aa:	d87f      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031ac:	2b70      	cmp	r3, #112	@ 0x70
 80031ae:	d01a      	beq.n	80031e6 <HAL_TIM_ConfigClockSource+0xa6>
 80031b0:	2b70      	cmp	r3, #112	@ 0x70
 80031b2:	d87b      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b60      	cmp	r3, #96	@ 0x60
 80031b6:	d050      	beq.n	800325a <HAL_TIM_ConfigClockSource+0x11a>
 80031b8:	2b60      	cmp	r3, #96	@ 0x60
 80031ba:	d877      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b50      	cmp	r3, #80	@ 0x50
 80031be:	d03c      	beq.n	800323a <HAL_TIM_ConfigClockSource+0xfa>
 80031c0:	2b50      	cmp	r3, #80	@ 0x50
 80031c2:	d873      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b40      	cmp	r3, #64	@ 0x40
 80031c6:	d058      	beq.n	800327a <HAL_TIM_ConfigClockSource+0x13a>
 80031c8:	2b40      	cmp	r3, #64	@ 0x40
 80031ca:	d86f      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031cc:	2b30      	cmp	r3, #48	@ 0x30
 80031ce:	d064      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x15a>
 80031d0:	2b30      	cmp	r3, #48	@ 0x30
 80031d2:	d86b      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d060      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x15a>
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d867      	bhi.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d05c      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x15a>
 80031e0:	2b10      	cmp	r3, #16
 80031e2:	d05a      	beq.n	800329a <HAL_TIM_ConfigClockSource+0x15a>
 80031e4:	e062      	b.n	80032ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031f6:	f000 f999 	bl	800352c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003208:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	609a      	str	r2, [r3, #8]
      break;
 8003212:	e04f      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003224:	f000 f982 	bl	800352c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003236:	609a      	str	r2, [r3, #8]
      break;
 8003238:	e03c      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003246:	461a      	mov	r2, r3
 8003248:	f000 f8f6 	bl	8003438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2150      	movs	r1, #80	@ 0x50
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f94f 	bl	80034f6 <TIM_ITRx_SetConfig>
      break;
 8003258:	e02c      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003266:	461a      	mov	r2, r3
 8003268:	f000 f915 	bl	8003496 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2160      	movs	r1, #96	@ 0x60
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f93f 	bl	80034f6 <TIM_ITRx_SetConfig>
      break;
 8003278:	e01c      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003286:	461a      	mov	r2, r3
 8003288:	f000 f8d6 	bl	8003438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2140      	movs	r1, #64	@ 0x40
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f92f 	bl	80034f6 <TIM_ITRx_SetConfig>
      break;
 8003298:	e00c      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4619      	mov	r1, r3
 80032a4:	4610      	mov	r0, r2
 80032a6:	f000 f926 	bl	80034f6 <TIM_ITRx_SetConfig>
      break;
 80032aa:	e003      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	73fb      	strb	r3, [r7, #15]
      break;
 80032b0:	e000      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ce:	b480      	push	{r7}
 80032d0:	b083      	sub	sp, #12
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032d6:	bf00      	nop
 80032d8:	370c      	adds	r7, #12
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr

080032e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032e2:	b480      	push	{r7}
 80032e4:	b083      	sub	sp, #12
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr

080032f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a3a      	ldr	r2, [pc, #232]	@ (800341c <TIM_Base_SetConfig+0xfc>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00f      	beq.n	8003358 <TIM_Base_SetConfig+0x38>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800333e:	d00b      	beq.n	8003358 <TIM_Base_SetConfig+0x38>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a37      	ldr	r2, [pc, #220]	@ (8003420 <TIM_Base_SetConfig+0x100>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d007      	beq.n	8003358 <TIM_Base_SetConfig+0x38>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a36      	ldr	r2, [pc, #216]	@ (8003424 <TIM_Base_SetConfig+0x104>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d003      	beq.n	8003358 <TIM_Base_SetConfig+0x38>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a35      	ldr	r2, [pc, #212]	@ (8003428 <TIM_Base_SetConfig+0x108>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d108      	bne.n	800336a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800335e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4313      	orrs	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a2b      	ldr	r2, [pc, #172]	@ (800341c <TIM_Base_SetConfig+0xfc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d01b      	beq.n	80033aa <TIM_Base_SetConfig+0x8a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003378:	d017      	beq.n	80033aa <TIM_Base_SetConfig+0x8a>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a28      	ldr	r2, [pc, #160]	@ (8003420 <TIM_Base_SetConfig+0x100>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d013      	beq.n	80033aa <TIM_Base_SetConfig+0x8a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a27      	ldr	r2, [pc, #156]	@ (8003424 <TIM_Base_SetConfig+0x104>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d00f      	beq.n	80033aa <TIM_Base_SetConfig+0x8a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a26      	ldr	r2, [pc, #152]	@ (8003428 <TIM_Base_SetConfig+0x108>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00b      	beq.n	80033aa <TIM_Base_SetConfig+0x8a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a25      	ldr	r2, [pc, #148]	@ (800342c <TIM_Base_SetConfig+0x10c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d007      	beq.n	80033aa <TIM_Base_SetConfig+0x8a>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a24      	ldr	r2, [pc, #144]	@ (8003430 <TIM_Base_SetConfig+0x110>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d003      	beq.n	80033aa <TIM_Base_SetConfig+0x8a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a23      	ldr	r2, [pc, #140]	@ (8003434 <TIM_Base_SetConfig+0x114>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d108      	bne.n	80033bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a0e      	ldr	r2, [pc, #56]	@ (800341c <TIM_Base_SetConfig+0xfc>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d103      	bne.n	80033f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d105      	bne.n	800340e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	f023 0201 	bic.w	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	611a      	str	r2, [r3, #16]
  }
}
 800340e:	bf00      	nop
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop
 800341c:	40010000 	.word	0x40010000
 8003420:	40000400 	.word	0x40000400
 8003424:	40000800 	.word	0x40000800
 8003428:	40000c00 	.word	0x40000c00
 800342c:	40014000 	.word	0x40014000
 8003430:	40014400 	.word	0x40014400
 8003434:	40014800 	.word	0x40014800

08003438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003438:	b480      	push	{r7}
 800343a:	b087      	sub	sp, #28
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	f023 0201 	bic.w	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f023 030a 	bic.w	r3, r3, #10
 8003474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4313      	orrs	r3, r2
 800347c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	621a      	str	r2, [r3, #32]
}
 800348a:	bf00      	nop
 800348c:	371c      	adds	r7, #28
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003496:	b480      	push	{r7}
 8003498:	b087      	sub	sp, #28
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f023 0210 	bic.w	r2, r3, #16
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	031b      	lsls	r3, r3, #12
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	011b      	lsls	r3, r3, #4
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	621a      	str	r2, [r3, #32]
}
 80034ea:	bf00      	nop
 80034ec:	371c      	adds	r7, #28
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr

080034f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b085      	sub	sp, #20
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800350c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	f043 0307 	orr.w	r3, r3, #7
 8003518:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	609a      	str	r2, [r3, #8]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
 8003538:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003546:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	021a      	lsls	r2, r3, #8
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	431a      	orrs	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4313      	orrs	r3, r2
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	609a      	str	r2, [r3, #8]
}
 8003560:	bf00      	nop
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800357c:	2b01      	cmp	r3, #1
 800357e:	d101      	bne.n	8003584 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003580:	2302      	movs	r3, #2
 8003582:	e050      	b.n	8003626 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2202      	movs	r2, #2
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003634 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d018      	beq.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d0:	d013      	beq.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a18      	ldr	r2, [pc, #96]	@ (8003638 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00e      	beq.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a16      	ldr	r2, [pc, #88]	@ (800363c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d009      	beq.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a15      	ldr	r2, [pc, #84]	@ (8003640 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d004      	beq.n	80035fa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a13      	ldr	r2, [pc, #76]	@ (8003644 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d10c      	bne.n	8003614 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003600:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4313      	orrs	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3714      	adds	r7, #20
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40010000 	.word	0x40010000
 8003638:	40000400 	.word	0x40000400
 800363c:	40000800 	.word	0x40000800
 8003640:	40000c00 	.word	0x40000c00
 8003644:	40014000 	.word	0x40014000

08003648 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d101      	bne.n	8003682 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e042      	b.n	8003708 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d106      	bne.n	800369c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7fd fb7e 	bl	8000d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2224      	movs	r2, #36	@ 0x24
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 fdb3 	bl	8004220 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691a      	ldr	r2, [r3, #16]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80036c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695a      	ldr	r2, [r3, #20]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08a      	sub	sp, #40	@ 0x28
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b20      	cmp	r3, #32
 800372e:	d175      	bne.n	800381c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <HAL_UART_Transmit+0x2c>
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e06e      	b.n	800381e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2221      	movs	r2, #33	@ 0x21
 800374a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800374e:	f7fd fc69 	bl	8001024 <HAL_GetTick>
 8003752:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	88fa      	ldrh	r2, [r7, #6]
 8003758:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	88fa      	ldrh	r2, [r7, #6]
 800375e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003768:	d108      	bne.n	800377c <HAL_UART_Transmit+0x6c>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d104      	bne.n	800377c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003772:	2300      	movs	r3, #0
 8003774:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	e003      	b.n	8003784 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003780:	2300      	movs	r3, #0
 8003782:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003784:	e02e      	b.n	80037e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2200      	movs	r2, #0
 800378e:	2180      	movs	r1, #128	@ 0x80
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fb15 	bl	8003dc0 <UART_WaitOnFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e03a      	b.n	800381e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10b      	bne.n	80037c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	3302      	adds	r3, #2
 80037c2:	61bb      	str	r3, [r7, #24]
 80037c4:	e007      	b.n	80037d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	781a      	ldrb	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	3301      	adds	r3, #1
 80037d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037da:	b29b      	uxth	r3, r3
 80037dc:	3b01      	subs	r3, #1
 80037de:	b29a      	uxth	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1cb      	bne.n	8003786 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2200      	movs	r2, #0
 80037f6:	2140      	movs	r1, #64	@ 0x40
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 fae1 	bl	8003dc0 <UART_WaitOnFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e006      	b.n	800381e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	e000      	b.n	800381e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800381c:	2302      	movs	r3, #2
  }
}
 800381e:	4618      	mov	r0, r3
 8003820:	3720      	adds	r7, #32
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}

08003826 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b084      	sub	sp, #16
 800382a:	af00      	add	r7, sp, #0
 800382c:	60f8      	str	r0, [r7, #12]
 800382e:	60b9      	str	r1, [r7, #8]
 8003830:	4613      	mov	r3, r2
 8003832:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800383a:	b2db      	uxtb	r3, r3
 800383c:	2b20      	cmp	r3, #32
 800383e:	d112      	bne.n	8003866 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <HAL_UART_Receive_IT+0x26>
 8003846:	88fb      	ldrh	r3, [r7, #6]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e00b      	b.n	8003868 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003856:	88fb      	ldrh	r3, [r7, #6]
 8003858:	461a      	mov	r2, r3
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fb08 	bl	8003e72 <UART_Start_Receive_IT>
 8003862:	4603      	mov	r3, r0
 8003864:	e000      	b.n	8003868 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003866:	2302      	movs	r3, #2
  }
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b0ba      	sub	sp, #232	@ 0xe8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80038a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80038ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10f      	bne.n	80038d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80038b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d009      	beq.n	80038d6 <HAL_UART_IRQHandler+0x66>
 80038c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038c6:	f003 0320 	and.w	r3, r3, #32
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fbe8 	bl	80040a4 <UART_Receive_IT>
      return;
 80038d4:	e25b      	b.n	8003d8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80038d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80de 	beq.w	8003a9c <HAL_UART_IRQHandler+0x22c>
 80038e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80038e4:	f003 0301 	and.w	r3, r3, #1
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d106      	bne.n	80038fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80038ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80d1 	beq.w	8003a9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80038fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00b      	beq.n	800391e <HAL_UART_IRQHandler+0xae>
 8003906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800390a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800390e:	2b00      	cmp	r3, #0
 8003910:	d005      	beq.n	800391e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003916:	f043 0201 	orr.w	r2, r3, #1
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800391e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00b      	beq.n	8003942 <HAL_UART_IRQHandler+0xd2>
 800392a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b00      	cmp	r3, #0
 8003934:	d005      	beq.n	8003942 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800393a:	f043 0202 	orr.w	r2, r3, #2
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_UART_IRQHandler+0xf6>
 800394e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d005      	beq.n	8003966 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800396a:	f003 0308 	and.w	r3, r3, #8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d011      	beq.n	8003996 <HAL_UART_IRQHandler+0x126>
 8003972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d105      	bne.n	800398a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800397e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d005      	beq.n	8003996 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800398e:	f043 0208 	orr.w	r2, r3, #8
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 81f2 	beq.w	8003d84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80039a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <HAL_UART_IRQHandler+0x14e>
 80039ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039b0:	f003 0320 	and.w	r3, r3, #32
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f000 fb73 	bl	80040a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c8:	2b40      	cmp	r3, #64	@ 0x40
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	f003 0308 	and.w	r3, r3, #8
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d103      	bne.n	80039ea <HAL_UART_IRQHandler+0x17a>
 80039e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d04f      	beq.n	8003a8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fa7b 	bl	8003ee6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fa:	2b40      	cmp	r3, #64	@ 0x40
 80039fc:	d141      	bne.n	8003a82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3314      	adds	r3, #20
 8003a04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003a14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003a18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3314      	adds	r3, #20
 8003a26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003a2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003a2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003a36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003a3a:	e841 2300 	strex	r3, r2, [r1]
 8003a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003a42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1d9      	bne.n	80039fe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d013      	beq.n	8003a7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a56:	4a7e      	ldr	r2, [pc, #504]	@ (8003c50 <HAL_UART_IRQHandler+0x3e0>)
 8003a58:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7fd fc91 	bl	8001386 <HAL_DMA_Abort_IT>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d016      	beq.n	8003a98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a74:	4610      	mov	r0, r2
 8003a76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a78:	e00e      	b.n	8003a98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fd f888 	bl	8000b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a80:	e00a      	b.n	8003a98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7fd f884 	bl	8000b90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a88:	e006      	b.n	8003a98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd f880 	bl	8000b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003a96:	e175      	b.n	8003d84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a98:	bf00      	nop
    return;
 8003a9a:	e173      	b.n	8003d84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	f040 814f 	bne.w	8003d44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8148 	beq.w	8003d44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 8141 	beq.w	8003d44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60bb      	str	r3, [r7, #8]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	60bb      	str	r3, [r7, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	695b      	ldr	r3, [r3, #20]
 8003ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ae2:	2b40      	cmp	r3, #64	@ 0x40
 8003ae4:	f040 80b6 	bne.w	8003c54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003af4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8145 	beq.w	8003d88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b06:	429a      	cmp	r2, r3
 8003b08:	f080 813e 	bcs.w	8003d88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b12:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b1e:	f000 8088 	beq.w	8003c32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	330c      	adds	r3, #12
 8003b28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003b38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003b3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	330c      	adds	r3, #12
 8003b4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003b4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003b52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003b5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003b5e:	e841 2300 	strex	r3, r2, [r1]
 8003b62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1d9      	bne.n	8003b22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3314      	adds	r3, #20
 8003b74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003b78:	e853 3f00 	ldrex	r3, [r3]
 8003b7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003b7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003b80:	f023 0301 	bic.w	r3, r3, #1
 8003b84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	3314      	adds	r3, #20
 8003b8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003b92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003b96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003b9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003b9e:	e841 2300 	strex	r3, r2, [r1]
 8003ba2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003ba4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1e1      	bne.n	8003b6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	3314      	adds	r3, #20
 8003bb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003bb4:	e853 3f00 	ldrex	r3, [r3]
 8003bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003bbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	3314      	adds	r3, #20
 8003bca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003bce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003bd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003bd6:	e841 2300 	strex	r3, r2, [r1]
 8003bda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003bdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1e3      	bne.n	8003baa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2220      	movs	r2, #32
 8003be6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	330c      	adds	r3, #12
 8003bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003c02:	f023 0310 	bic.w	r3, r3, #16
 8003c06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	330c      	adds	r3, #12
 8003c10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003c14:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003c16:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003c1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003c1c:	e841 2300 	strex	r3, r2, [r1]
 8003c20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003c22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e3      	bne.n	8003bf0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f7fd fb3a 	bl	80012a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2202      	movs	r2, #2
 8003c36:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	4619      	mov	r1, r3
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f000 f8ad 	bl	8003da8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c4e:	e09b      	b.n	8003d88 <HAL_UART_IRQHandler+0x518>
 8003c50:	08003fad 	.word	0x08003fad
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 808e 	beq.w	8003d8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003c70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 8089 	beq.w	8003d8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	330c      	adds	r3, #12
 8003c9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003c9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ca0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ca4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003cac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e3      	bne.n	8003c7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3314      	adds	r3, #20
 8003cb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	e853 3f00 	ldrex	r3, [r3]
 8003cc0:	623b      	str	r3, [r7, #32]
   return(result);
 8003cc2:	6a3b      	ldr	r3, [r7, #32]
 8003cc4:	f023 0301 	bic.w	r3, r3, #1
 8003cc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3314      	adds	r3, #20
 8003cd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003cd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003cd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003cdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cde:	e841 2300 	strex	r3, r2, [r1]
 8003ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1e3      	bne.n	8003cb2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	330c      	adds	r3, #12
 8003cfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0310 	bic.w	r3, r3, #16
 8003d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	330c      	adds	r3, #12
 8003d18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003d1c:	61fa      	str	r2, [r7, #28]
 8003d1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d20:	69b9      	ldr	r1, [r7, #24]
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	617b      	str	r3, [r7, #20]
   return(result);
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1e3      	bne.n	8003cf8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2202      	movs	r2, #2
 8003d34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003d36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 f833 	bl	8003da8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d42:	e023      	b.n	8003d8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d009      	beq.n	8003d64 <HAL_UART_IRQHandler+0x4f4>
 8003d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f939 	bl	8003fd4 <UART_Transmit_IT>
    return;
 8003d62:	e014      	b.n	8003d8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00e      	beq.n	8003d8e <HAL_UART_IRQHandler+0x51e>
 8003d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d008      	beq.n	8003d8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f979 	bl	8004074 <UART_EndTransmit_IT>
    return;
 8003d82:	e004      	b.n	8003d8e <HAL_UART_IRQHandler+0x51e>
    return;
 8003d84:	bf00      	nop
 8003d86:	e002      	b.n	8003d8e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d88:	bf00      	nop
 8003d8a:	e000      	b.n	8003d8e <HAL_UART_IRQHandler+0x51e>
      return;
 8003d8c:	bf00      	nop
  }
}
 8003d8e:	37e8      	adds	r7, #232	@ 0xe8
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b083      	sub	sp, #12
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	460b      	mov	r3, r1
 8003db2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	603b      	str	r3, [r7, #0]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dd0:	e03b      	b.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dd2:	6a3b      	ldr	r3, [r7, #32]
 8003dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd8:	d037      	beq.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dda:	f7fd f923 	bl	8001024 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d302      	bcc.n	8003df0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003dea:	6a3b      	ldr	r3, [r7, #32]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e03a      	b.n	8003e6a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f003 0304 	and.w	r3, r3, #4
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d023      	beq.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b80      	cmp	r3, #128	@ 0x80
 8003e06:	d020      	beq.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x8a>
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b40      	cmp	r3, #64	@ 0x40
 8003e0c:	d01d      	beq.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0308 	and.w	r3, r3, #8
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d116      	bne.n	8003e4a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	617b      	str	r3, [r7, #20]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f857 	bl	8003ee6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2208      	movs	r2, #8
 8003e3c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e00f      	b.n	8003e6a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4013      	ands	r3, r2
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	bf0c      	ite	eq
 8003e5a:	2301      	moveq	r3, #1
 8003e5c:	2300      	movne	r3, #0
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	461a      	mov	r2, r3
 8003e62:	79fb      	ldrb	r3, [r7, #7]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d0b4      	beq.n	8003dd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3718      	adds	r7, #24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b085      	sub	sp, #20
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	60f8      	str	r0, [r7, #12]
 8003e7a:	60b9      	str	r1, [r7, #8]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	88fa      	ldrh	r2, [r7, #6]
 8003e8a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2222      	movs	r2, #34	@ 0x22
 8003e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d007      	beq.n	8003eb8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003eb6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695a      	ldr	r2, [r3, #20]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 0201 	orr.w	r2, r2, #1
 8003ec6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0220 	orr.w	r2, r2, #32
 8003ed6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b095      	sub	sp, #84	@ 0x54
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f0e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e5      	bne.n	8003eee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3314      	adds	r3, #20
 8003f28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3314      	adds	r3, #20
 8003f40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e5      	bne.n	8003f22 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5a:	2b01      	cmp	r3, #1
 8003f5c:	d119      	bne.n	8003f92 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	330c      	adds	r3, #12
 8003f64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f023 0310 	bic.w	r3, r3, #16
 8003f74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	330c      	adds	r3, #12
 8003f7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f7e:	61ba      	str	r2, [r7, #24]
 8003f80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f82:	6979      	ldr	r1, [r7, #20]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	e841 2300 	strex	r3, r2, [r1]
 8003f8a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1e5      	bne.n	8003f5e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2220      	movs	r2, #32
 8003f96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003fa0:	bf00      	nop
 8003fa2:	3754      	adds	r7, #84	@ 0x54
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fb8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f7fc fde2 	bl	8000b90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fcc:	bf00      	nop
 8003fce:	3710      	adds	r7, #16
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b21      	cmp	r3, #33	@ 0x21
 8003fe6:	d13e      	bne.n	8004066 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ff0:	d114      	bne.n	800401c <UART_Transmit_IT+0x48>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d110      	bne.n	800401c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	881b      	ldrh	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800400e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	1c9a      	adds	r2, r3, #2
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	621a      	str	r2, [r3, #32]
 800401a:	e008      	b.n	800402e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	1c59      	adds	r1, r3, #1
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6211      	str	r1, [r2, #32]
 8004026:	781a      	ldrb	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004032:	b29b      	uxth	r3, r3
 8004034:	3b01      	subs	r3, #1
 8004036:	b29b      	uxth	r3, r3
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	4619      	mov	r1, r3
 800403c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10f      	bne.n	8004062 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004050:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004060:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004062:	2300      	movs	r3, #0
 8004064:	e000      	b.n	8004068 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004066:	2302      	movs	r3, #2
  }
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800408a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fe7d 	bl	8003d94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08c      	sub	sp, #48	@ 0x30
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b22      	cmp	r3, #34	@ 0x22
 80040b6:	f040 80ae 	bne.w	8004216 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040c2:	d117      	bne.n	80040f4 <UART_Receive_IT+0x50>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d113      	bne.n	80040f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040cc:	2300      	movs	r3, #0
 80040ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	b29b      	uxth	r3, r3
 80040de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ec:	1c9a      	adds	r2, r3, #2
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80040f2:	e026      	b.n	8004142 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004106:	d007      	beq.n	8004118 <UART_Receive_IT+0x74>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10a      	bne.n	8004126 <UART_Receive_IT+0x82>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d106      	bne.n	8004126 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	b2da      	uxtb	r2, r3
 8004120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e008      	b.n	8004138 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004132:	b2da      	uxtb	r2, r3
 8004134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004136:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29b      	uxth	r3, r3
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	4619      	mov	r1, r3
 8004150:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004152:	2b00      	cmp	r3, #0
 8004154:	d15d      	bne.n	8004212 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0220 	bic.w	r2, r2, #32
 8004164:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004174:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	695a      	ldr	r2, [r3, #20]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0201 	bic.w	r2, r2, #1
 8004184:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2220      	movs	r2, #32
 800418a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004198:	2b01      	cmp	r3, #1
 800419a:	d135      	bne.n	8004208 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	330c      	adds	r3, #12
 80041a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	613b      	str	r3, [r7, #16]
   return(result);
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	f023 0310 	bic.w	r3, r3, #16
 80041b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	330c      	adds	r3, #12
 80041c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c2:	623a      	str	r2, [r7, #32]
 80041c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c6:	69f9      	ldr	r1, [r7, #28]
 80041c8:	6a3a      	ldr	r2, [r7, #32]
 80041ca:	e841 2300 	strex	r3, r2, [r1]
 80041ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1e5      	bne.n	80041a2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d10a      	bne.n	80041fa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	60fb      	str	r3, [r7, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041fe:	4619      	mov	r1, r3
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff fdd1 	bl	8003da8 <HAL_UARTEx_RxEventCallback>
 8004206:	e002      	b.n	800420e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fc fc69 	bl	8000ae0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800420e:	2300      	movs	r3, #0
 8004210:	e002      	b.n	8004218 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	e000      	b.n	8004218 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004216:	2302      	movs	r3, #2
  }
}
 8004218:	4618      	mov	r0, r3
 800421a:	3730      	adds	r7, #48	@ 0x30
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004224:	b0c0      	sub	sp, #256	@ 0x100
 8004226:	af00      	add	r7, sp, #0
 8004228:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800422c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691b      	ldr	r3, [r3, #16]
 8004234:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423c:	68d9      	ldr	r1, [r3, #12]
 800423e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	ea40 0301 	orr.w	r3, r0, r1
 8004248:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800424a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	431a      	orrs	r2, r3
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	431a      	orrs	r2, r3
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004278:	f021 010c 	bic.w	r1, r1, #12
 800427c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004286:	430b      	orrs	r3, r1
 8004288:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800428a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429a:	6999      	ldr	r1, [r3, #24]
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	ea40 0301 	orr.w	r3, r0, r1
 80042a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	4b8f      	ldr	r3, [pc, #572]	@ (80044ec <UART_SetConfig+0x2cc>)
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d005      	beq.n	80042c0 <UART_SetConfig+0xa0>
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	4b8d      	ldr	r3, [pc, #564]	@ (80044f0 <UART_SetConfig+0x2d0>)
 80042bc:	429a      	cmp	r2, r3
 80042be:	d104      	bne.n	80042ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042c0:	f7fd fea4 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 80042c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042c8:	e003      	b.n	80042d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ca:	f7fd fe8b 	bl	8001fe4 <HAL_RCC_GetPCLK1Freq>
 80042ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042dc:	f040 810c 	bne.w	80044f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80042e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e4:	2200      	movs	r2, #0
 80042e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80042ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80042ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80042f2:	4622      	mov	r2, r4
 80042f4:	462b      	mov	r3, r5
 80042f6:	1891      	adds	r1, r2, r2
 80042f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042fa:	415b      	adcs	r3, r3
 80042fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004302:	4621      	mov	r1, r4
 8004304:	eb12 0801 	adds.w	r8, r2, r1
 8004308:	4629      	mov	r1, r5
 800430a:	eb43 0901 	adc.w	r9, r3, r1
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	f04f 0300 	mov.w	r3, #0
 8004316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800431a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800431e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004322:	4690      	mov	r8, r2
 8004324:	4699      	mov	r9, r3
 8004326:	4623      	mov	r3, r4
 8004328:	eb18 0303 	adds.w	r3, r8, r3
 800432c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004330:	462b      	mov	r3, r5
 8004332:	eb49 0303 	adc.w	r3, r9, r3
 8004336:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800433a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004346:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800434a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800434e:	460b      	mov	r3, r1
 8004350:	18db      	adds	r3, r3, r3
 8004352:	653b      	str	r3, [r7, #80]	@ 0x50
 8004354:	4613      	mov	r3, r2
 8004356:	eb42 0303 	adc.w	r3, r2, r3
 800435a:	657b      	str	r3, [r7, #84]	@ 0x54
 800435c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004360:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004364:	f7fb ff38 	bl	80001d8 <__aeabi_uldivmod>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4b61      	ldr	r3, [pc, #388]	@ (80044f4 <UART_SetConfig+0x2d4>)
 800436e:	fba3 2302 	umull	r2, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	011c      	lsls	r4, r3, #4
 8004376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800437a:	2200      	movs	r2, #0
 800437c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004380:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004384:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004388:	4642      	mov	r2, r8
 800438a:	464b      	mov	r3, r9
 800438c:	1891      	adds	r1, r2, r2
 800438e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004390:	415b      	adcs	r3, r3
 8004392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004394:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004398:	4641      	mov	r1, r8
 800439a:	eb12 0a01 	adds.w	sl, r2, r1
 800439e:	4649      	mov	r1, r9
 80043a0:	eb43 0b01 	adc.w	fp, r3, r1
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043b8:	4692      	mov	sl, r2
 80043ba:	469b      	mov	fp, r3
 80043bc:	4643      	mov	r3, r8
 80043be:	eb1a 0303 	adds.w	r3, sl, r3
 80043c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043c6:	464b      	mov	r3, r9
 80043c8:	eb4b 0303 	adc.w	r3, fp, r3
 80043cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80043e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80043e4:	460b      	mov	r3, r1
 80043e6:	18db      	adds	r3, r3, r3
 80043e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80043ea:	4613      	mov	r3, r2
 80043ec:	eb42 0303 	adc.w	r3, r2, r3
 80043f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043fa:	f7fb feed 	bl	80001d8 <__aeabi_uldivmod>
 80043fe:	4602      	mov	r2, r0
 8004400:	460b      	mov	r3, r1
 8004402:	4611      	mov	r1, r2
 8004404:	4b3b      	ldr	r3, [pc, #236]	@ (80044f4 <UART_SetConfig+0x2d4>)
 8004406:	fba3 2301 	umull	r2, r3, r3, r1
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	2264      	movs	r2, #100	@ 0x64
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	1acb      	subs	r3, r1, r3
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800441a:	4b36      	ldr	r3, [pc, #216]	@ (80044f4 <UART_SetConfig+0x2d4>)
 800441c:	fba3 2302 	umull	r2, r3, r3, r2
 8004420:	095b      	lsrs	r3, r3, #5
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004428:	441c      	add	r4, r3
 800442a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800442e:	2200      	movs	r2, #0
 8004430:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004434:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004438:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800443c:	4642      	mov	r2, r8
 800443e:	464b      	mov	r3, r9
 8004440:	1891      	adds	r1, r2, r2
 8004442:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004444:	415b      	adcs	r3, r3
 8004446:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004448:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800444c:	4641      	mov	r1, r8
 800444e:	1851      	adds	r1, r2, r1
 8004450:	6339      	str	r1, [r7, #48]	@ 0x30
 8004452:	4649      	mov	r1, r9
 8004454:	414b      	adcs	r3, r1
 8004456:	637b      	str	r3, [r7, #52]	@ 0x34
 8004458:	f04f 0200 	mov.w	r2, #0
 800445c:	f04f 0300 	mov.w	r3, #0
 8004460:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004464:	4659      	mov	r1, fp
 8004466:	00cb      	lsls	r3, r1, #3
 8004468:	4651      	mov	r1, sl
 800446a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800446e:	4651      	mov	r1, sl
 8004470:	00ca      	lsls	r2, r1, #3
 8004472:	4610      	mov	r0, r2
 8004474:	4619      	mov	r1, r3
 8004476:	4603      	mov	r3, r0
 8004478:	4642      	mov	r2, r8
 800447a:	189b      	adds	r3, r3, r2
 800447c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004480:	464b      	mov	r3, r9
 8004482:	460a      	mov	r2, r1
 8004484:	eb42 0303 	adc.w	r3, r2, r3
 8004488:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004498:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800449c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044a0:	460b      	mov	r3, r1
 80044a2:	18db      	adds	r3, r3, r3
 80044a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044a6:	4613      	mov	r3, r2
 80044a8:	eb42 0303 	adc.w	r3, r2, r3
 80044ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044b6:	f7fb fe8f 	bl	80001d8 <__aeabi_uldivmod>
 80044ba:	4602      	mov	r2, r0
 80044bc:	460b      	mov	r3, r1
 80044be:	4b0d      	ldr	r3, [pc, #52]	@ (80044f4 <UART_SetConfig+0x2d4>)
 80044c0:	fba3 1302 	umull	r1, r3, r3, r2
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	2164      	movs	r1, #100	@ 0x64
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	3332      	adds	r3, #50	@ 0x32
 80044d2:	4a08      	ldr	r2, [pc, #32]	@ (80044f4 <UART_SetConfig+0x2d4>)
 80044d4:	fba2 2303 	umull	r2, r3, r2, r3
 80044d8:	095b      	lsrs	r3, r3, #5
 80044da:	f003 0207 	and.w	r2, r3, #7
 80044de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4422      	add	r2, r4
 80044e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044e8:	e106      	b.n	80046f8 <UART_SetConfig+0x4d8>
 80044ea:	bf00      	nop
 80044ec:	40011000 	.word	0x40011000
 80044f0:	40011400 	.word	0x40011400
 80044f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044fc:	2200      	movs	r2, #0
 80044fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004502:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004506:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800450a:	4642      	mov	r2, r8
 800450c:	464b      	mov	r3, r9
 800450e:	1891      	adds	r1, r2, r2
 8004510:	6239      	str	r1, [r7, #32]
 8004512:	415b      	adcs	r3, r3
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
 8004516:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800451a:	4641      	mov	r1, r8
 800451c:	1854      	adds	r4, r2, r1
 800451e:	4649      	mov	r1, r9
 8004520:	eb43 0501 	adc.w	r5, r3, r1
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	00eb      	lsls	r3, r5, #3
 800452e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004532:	00e2      	lsls	r2, r4, #3
 8004534:	4614      	mov	r4, r2
 8004536:	461d      	mov	r5, r3
 8004538:	4643      	mov	r3, r8
 800453a:	18e3      	adds	r3, r4, r3
 800453c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004540:	464b      	mov	r3, r9
 8004542:	eb45 0303 	adc.w	r3, r5, r3
 8004546:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800454a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004556:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004566:	4629      	mov	r1, r5
 8004568:	008b      	lsls	r3, r1, #2
 800456a:	4621      	mov	r1, r4
 800456c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004570:	4621      	mov	r1, r4
 8004572:	008a      	lsls	r2, r1, #2
 8004574:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004578:	f7fb fe2e 	bl	80001d8 <__aeabi_uldivmod>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4b60      	ldr	r3, [pc, #384]	@ (8004704 <UART_SetConfig+0x4e4>)
 8004582:	fba3 2302 	umull	r2, r3, r3, r2
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	011c      	lsls	r4, r3, #4
 800458a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800458e:	2200      	movs	r2, #0
 8004590:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004594:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004598:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800459c:	4642      	mov	r2, r8
 800459e:	464b      	mov	r3, r9
 80045a0:	1891      	adds	r1, r2, r2
 80045a2:	61b9      	str	r1, [r7, #24]
 80045a4:	415b      	adcs	r3, r3
 80045a6:	61fb      	str	r3, [r7, #28]
 80045a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045ac:	4641      	mov	r1, r8
 80045ae:	1851      	adds	r1, r2, r1
 80045b0:	6139      	str	r1, [r7, #16]
 80045b2:	4649      	mov	r1, r9
 80045b4:	414b      	adcs	r3, r1
 80045b6:	617b      	str	r3, [r7, #20]
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045c4:	4659      	mov	r1, fp
 80045c6:	00cb      	lsls	r3, r1, #3
 80045c8:	4651      	mov	r1, sl
 80045ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ce:	4651      	mov	r1, sl
 80045d0:	00ca      	lsls	r2, r1, #3
 80045d2:	4610      	mov	r0, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	4603      	mov	r3, r0
 80045d8:	4642      	mov	r2, r8
 80045da:	189b      	adds	r3, r3, r2
 80045dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80045e0:	464b      	mov	r3, r9
 80045e2:	460a      	mov	r2, r1
 80045e4:	eb42 0303 	adc.w	r3, r2, r3
 80045e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004604:	4649      	mov	r1, r9
 8004606:	008b      	lsls	r3, r1, #2
 8004608:	4641      	mov	r1, r8
 800460a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800460e:	4641      	mov	r1, r8
 8004610:	008a      	lsls	r2, r1, #2
 8004612:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004616:	f7fb fddf 	bl	80001d8 <__aeabi_uldivmod>
 800461a:	4602      	mov	r2, r0
 800461c:	460b      	mov	r3, r1
 800461e:	4611      	mov	r1, r2
 8004620:	4b38      	ldr	r3, [pc, #224]	@ (8004704 <UART_SetConfig+0x4e4>)
 8004622:	fba3 2301 	umull	r2, r3, r3, r1
 8004626:	095b      	lsrs	r3, r3, #5
 8004628:	2264      	movs	r2, #100	@ 0x64
 800462a:	fb02 f303 	mul.w	r3, r2, r3
 800462e:	1acb      	subs	r3, r1, r3
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	3332      	adds	r3, #50	@ 0x32
 8004634:	4a33      	ldr	r2, [pc, #204]	@ (8004704 <UART_SetConfig+0x4e4>)
 8004636:	fba2 2303 	umull	r2, r3, r2, r3
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004640:	441c      	add	r4, r3
 8004642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004646:	2200      	movs	r2, #0
 8004648:	673b      	str	r3, [r7, #112]	@ 0x70
 800464a:	677a      	str	r2, [r7, #116]	@ 0x74
 800464c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004650:	4642      	mov	r2, r8
 8004652:	464b      	mov	r3, r9
 8004654:	1891      	adds	r1, r2, r2
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	415b      	adcs	r3, r3
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004660:	4641      	mov	r1, r8
 8004662:	1851      	adds	r1, r2, r1
 8004664:	6039      	str	r1, [r7, #0]
 8004666:	4649      	mov	r1, r9
 8004668:	414b      	adcs	r3, r1
 800466a:	607b      	str	r3, [r7, #4]
 800466c:	f04f 0200 	mov.w	r2, #0
 8004670:	f04f 0300 	mov.w	r3, #0
 8004674:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004678:	4659      	mov	r1, fp
 800467a:	00cb      	lsls	r3, r1, #3
 800467c:	4651      	mov	r1, sl
 800467e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004682:	4651      	mov	r1, sl
 8004684:	00ca      	lsls	r2, r1, #3
 8004686:	4610      	mov	r0, r2
 8004688:	4619      	mov	r1, r3
 800468a:	4603      	mov	r3, r0
 800468c:	4642      	mov	r2, r8
 800468e:	189b      	adds	r3, r3, r2
 8004690:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004692:	464b      	mov	r3, r9
 8004694:	460a      	mov	r2, r1
 8004696:	eb42 0303 	adc.w	r3, r2, r3
 800469a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80046a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046b4:	4649      	mov	r1, r9
 80046b6:	008b      	lsls	r3, r1, #2
 80046b8:	4641      	mov	r1, r8
 80046ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046be:	4641      	mov	r1, r8
 80046c0:	008a      	lsls	r2, r1, #2
 80046c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046c6:	f7fb fd87 	bl	80001d8 <__aeabi_uldivmod>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004704 <UART_SetConfig+0x4e4>)
 80046d0:	fba3 1302 	umull	r1, r3, r3, r2
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	2164      	movs	r1, #100	@ 0x64
 80046d8:	fb01 f303 	mul.w	r3, r1, r3
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	3332      	adds	r3, #50	@ 0x32
 80046e2:	4a08      	ldr	r2, [pc, #32]	@ (8004704 <UART_SetConfig+0x4e4>)
 80046e4:	fba2 2303 	umull	r2, r3, r2, r3
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	f003 020f 	and.w	r2, r3, #15
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4422      	add	r2, r4
 80046f6:	609a      	str	r2, [r3, #8]
}
 80046f8:	bf00      	nop
 80046fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046fe:	46bd      	mov	sp, r7
 8004700:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004704:	51eb851f 	.word	0x51eb851f

08004708 <csn_high>:
#include "NRF24.h"

extern SPI_HandleTypeDef hspiX;


void csn_high(void){
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 1);
 800470c:	2201      	movs	r2, #1
 800470e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004712:	4802      	ldr	r0, [pc, #8]	@ (800471c <csn_high+0x14>)
 8004714:	f7fc ffde 	bl	80016d4 <HAL_GPIO_WritePin>
}
 8004718:	bf00      	nop
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40020400 	.word	0x40020400

08004720 <csn_low>:

void csn_low(void){
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(csn_gpio_port, csn_gpio_pin, 0);
 8004724:	2200      	movs	r2, #0
 8004726:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800472a:	4802      	ldr	r0, [pc, #8]	@ (8004734 <csn_low+0x14>)
 800472c:	f7fc ffd2 	bl	80016d4 <HAL_GPIO_WritePin>
}
 8004730:	bf00      	nop
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40020400 	.word	0x40020400

08004738 <ce_high>:

void ce_high(void){
 8004738:	b580      	push	{r7, lr}
 800473a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 1);
 800473c:	2201      	movs	r2, #1
 800473e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8004742:	4802      	ldr	r0, [pc, #8]	@ (800474c <ce_high+0x14>)
 8004744:	f7fc ffc6 	bl	80016d4 <HAL_GPIO_WritePin>
}
 8004748:	bf00      	nop
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40020400 	.word	0x40020400

08004750 <nrf24_w_reg>:

void ce_low(void){
	HAL_GPIO_WritePin(ce_gpio_port, ce_gpio_pin, 0);
}

void nrf24_w_reg(uint8_t reg, uint8_t *data, uint8_t size){
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	6039      	str	r1, [r7, #0]
 800475a:	71fb      	strb	r3, [r7, #7]
 800475c:	4613      	mov	r3, r2
 800475e:	71bb      	strb	r3, [r7, #6]

	uint8_t cmd = W_REGISTER | reg;
 8004760:	79fb      	ldrb	r3, [r7, #7]
 8004762:	f043 0320 	orr.w	r3, r3, #32
 8004766:	b2db      	uxtb	r3, r3
 8004768:	73fb      	strb	r3, [r7, #15]

	csn_low();
 800476a:	f7ff ffd9 	bl	8004720 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 800476e:	f107 010f 	add.w	r1, r7, #15
 8004772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004776:	2201      	movs	r2, #1
 8004778:	4808      	ldr	r0, [pc, #32]	@ (800479c <nrf24_w_reg+0x4c>)
 800477a:	f7fd fce4 	bl	8002146 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspiX, data, size, spi_w_timeout);
 800477e:	79bb      	ldrb	r3, [r7, #6]
 8004780:	b29a      	uxth	r2, r3
 8004782:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004786:	6839      	ldr	r1, [r7, #0]
 8004788:	4804      	ldr	r0, [pc, #16]	@ (800479c <nrf24_w_reg+0x4c>)
 800478a:	f7fd fcdc 	bl	8002146 <HAL_SPI_Transmit>

	csn_high();
 800478e:	f7ff ffbb 	bl	8004708 <csn_high>
}
 8004792:	bf00      	nop
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	2000002c 	.word	0x2000002c

080047a0 <nrf24_r_reg>:

uint8_t nrf24_r_reg(uint8_t reg, uint8_t size){
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	4603      	mov	r3, r0
 80047a8:	460a      	mov	r2, r1
 80047aa:	71fb      	strb	r3, [r7, #7]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71bb      	strb	r3, [r7, #6]
	uint8_t cmd = R_REGISTER | reg;
 80047b0:	79fb      	ldrb	r3, [r7, #7]
 80047b2:	73fb      	strb	r3, [r7, #15]
	uint8_t data = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	73bb      	strb	r3, [r7, #14]

	csn_low();
 80047b8:	f7ff ffb2 	bl	8004720 <csn_low>

	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80047bc:	f107 010f 	add.w	r1, r7, #15
 80047c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047c4:	2201      	movs	r2, #1
 80047c6:	4809      	ldr	r0, [pc, #36]	@ (80047ec <nrf24_r_reg+0x4c>)
 80047c8:	f7fd fcbd 	bl	8002146 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, &data, size, spi_r_timeout);
 80047cc:	79bb      	ldrb	r3, [r7, #6]
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	f107 010e 	add.w	r1, r7, #14
 80047d4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80047d8:	4804      	ldr	r0, [pc, #16]	@ (80047ec <nrf24_r_reg+0x4c>)
 80047da:	f7fd fdf8 	bl	80023ce <HAL_SPI_Receive>

	csn_high();
 80047de:	f7ff ff93 	bl	8004708 <csn_high>

	return data;
 80047e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	2000002c 	.word	0x2000002c

080047f0 <nrf24_w_spec_cmd>:

void nrf24_w_spec_cmd(uint8_t cmd){
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b082      	sub	sp, #8
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	4603      	mov	r3, r0
 80047f8:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 80047fa:	1df9      	adds	r1, r7, #7
 80047fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004800:	2201      	movs	r2, #1
 8004802:	4803      	ldr	r0, [pc, #12]	@ (8004810 <nrf24_w_spec_cmd+0x20>)
 8004804:	f7fd fc9f 	bl	8002146 <HAL_SPI_Transmit>
}
 8004808:	bf00      	nop
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	2000002c 	.word	0x2000002c

08004814 <nrf24_pwr_up>:

void nrf24_r_spec_reg(uint8_t *data, uint8_t size){
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
}

void nrf24_pwr_up(void){
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 800481e:	2101      	movs	r1, #1
 8004820:	2000      	movs	r0, #0
 8004822:	f7ff ffbd 	bl	80047a0 <nrf24_r_reg>
 8004826:	4603      	mov	r3, r0
 8004828:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PWR_UP);
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	f043 0302 	orr.w	r3, r3, #2
 8004830:	b2db      	uxtb	r3, r3
 8004832:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8004834:	1dfb      	adds	r3, r7, #7
 8004836:	2201      	movs	r2, #1
 8004838:	4619      	mov	r1, r3
 800483a:	2000      	movs	r0, #0
 800483c:	f7ff ff88 	bl	8004750 <nrf24_w_reg>
}
 8004840:	bf00      	nop
 8004842:	3708      	adds	r7, #8
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <nrf24_tx_pwr>:
	data &= ~(1 << PWR_UP);

	nrf24_w_reg(CONFIG, &data, 1);
}

void nrf24_tx_pwr(uint8_t pwr){
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 8004852:	2300      	movs	r3, #0
 8004854:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 8004856:	2101      	movs	r1, #1
 8004858:	2006      	movs	r0, #6
 800485a:	f7ff ffa1 	bl	80047a0 <nrf24_r_reg>
 800485e:	4603      	mov	r3, r0
 8004860:	73fb      	strb	r3, [r7, #15]

	data &= 184;
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	f023 0347 	bic.w	r3, r3, #71	@ 0x47
 8004868:	b2db      	uxtb	r3, r3
 800486a:	73fb      	strb	r3, [r7, #15]

	data |= (pwr << RF_PWR);
 800486c:	79fb      	ldrb	r3, [r7, #7]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	b25a      	sxtb	r2, r3
 8004872:	7bfb      	ldrb	r3, [r7, #15]
 8004874:	b25b      	sxtb	r3, r3
 8004876:	4313      	orrs	r3, r2
 8004878:	b25b      	sxtb	r3, r3
 800487a:	b2db      	uxtb	r3, r3
 800487c:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(RF_SETUP, &data, 1);
 800487e:	f107 030f 	add.w	r3, r7, #15
 8004882:	2201      	movs	r2, #1
 8004884:	4619      	mov	r1, r3
 8004886:	2006      	movs	r0, #6
 8004888:	f7ff ff62 	bl	8004750 <nrf24_w_reg>
}
 800488c:	bf00      	nop
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <nrf24_data_rate>:

void nrf24_data_rate(uint8_t bps){
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(RF_SETUP, 1);
 80048a2:	2101      	movs	r1, #1
 80048a4:	2006      	movs	r0, #6
 80048a6:	f7ff ff7b 	bl	80047a0 <nrf24_r_reg>
 80048aa:	4603      	mov	r3, r0
 80048ac:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << RF_DR_LOW) & ~(1 << RF_DR_HIGH);
 80048ae:	7bfb      	ldrb	r3, [r7, #15]
 80048b0:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	73fb      	strb	r3, [r7, #15]

	if(bps == _2mbps){
 80048b8:	79fb      	ldrb	r3, [r7, #7]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d105      	bne.n	80048ca <nrf24_data_rate+0x36>
		data |= (1 << RF_DR_HIGH);
 80048be:	7bfb      	ldrb	r3, [r7, #15]
 80048c0:	f043 0308 	orr.w	r3, r3, #8
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	73fb      	strb	r3, [r7, #15]
 80048c8:	e007      	b.n	80048da <nrf24_data_rate+0x46>
	}else if(bps == _250kbps){
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d104      	bne.n	80048da <nrf24_data_rate+0x46>
		data |= (1 << RF_DR_LOW);
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	f043 0320 	orr.w	r3, r3, #32
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	73fb      	strb	r3, [r7, #15]
	}

	nrf24_w_reg(RF_SETUP, &data, 1);
 80048da:	f107 030f 	add.w	r3, r7, #15
 80048de:	2201      	movs	r2, #1
 80048e0:	4619      	mov	r1, r3
 80048e2:	2006      	movs	r0, #6
 80048e4:	f7ff ff34 	bl	8004750 <nrf24_w_reg>
}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <nrf24_set_channel>:

void nrf24_set_channel(uint8_t ch){
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	71fb      	strb	r3, [r7, #7]
	nrf24_w_reg(RF_CH, &ch, 1);
 80048fa:	1dfb      	adds	r3, r7, #7
 80048fc:	2201      	movs	r2, #1
 80048fe:	4619      	mov	r1, r3
 8004900:	2005      	movs	r0, #5
 8004902:	f7ff ff25 	bl	8004750 <nrf24_w_reg>
}
 8004906:	bf00      	nop
 8004908:	3708      	adds	r7, #8
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}

0800490e <nrf24_open_tx_pipe>:

void nrf24_open_tx_pipe(uint8_t *addr){
 800490e:	b580      	push	{r7, lr}
 8004910:	b082      	sub	sp, #8
 8004912:	af00      	add	r7, sp, #0
 8004914:	6078      	str	r0, [r7, #4]
	nrf24_w_reg(TX_ADDR, addr, 5);
 8004916:	2205      	movs	r2, #5
 8004918:	6879      	ldr	r1, [r7, #4]
 800491a:	2010      	movs	r0, #16
 800491c:	f7ff ff18 	bl	8004750 <nrf24_w_reg>
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <nrf24_pipe_pld_size>:

void nrf24_pipe_pld_size(uint8_t pipe, uint8_t size){
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	460a      	mov	r2, r1
 8004932:	71fb      	strb	r3, [r7, #7]
 8004934:	4613      	mov	r3, r2
 8004936:	71bb      	strb	r3, [r7, #6]
	if(size > 32){
 8004938:	79bb      	ldrb	r3, [r7, #6]
 800493a:	2b20      	cmp	r3, #32
 800493c:	d901      	bls.n	8004942 <nrf24_pipe_pld_size+0x1a>
		size = 32;
 800493e:	2320      	movs	r3, #32
 8004940:	71bb      	strb	r3, [r7, #6]
	}

	switch(pipe){
 8004942:	79fb      	ldrb	r3, [r7, #7]
 8004944:	2b05      	cmp	r3, #5
 8004946:	d839      	bhi.n	80049bc <nrf24_pipe_pld_size+0x94>
 8004948:	a201      	add	r2, pc, #4	@ (adr r2, 8004950 <nrf24_pipe_pld_size+0x28>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004969 	.word	0x08004969
 8004954:	08004977 	.word	0x08004977
 8004958:	08004985 	.word	0x08004985
 800495c:	08004993 	.word	0x08004993
 8004960:	080049a1 	.word	0x080049a1
 8004964:	080049af 	.word	0x080049af
	case 0:
		nrf24_w_reg(RX_PW_P0, &size, 1);
 8004968:	1dbb      	adds	r3, r7, #6
 800496a:	2201      	movs	r2, #1
 800496c:	4619      	mov	r1, r3
 800496e:	2011      	movs	r0, #17
 8004970:	f7ff feee 	bl	8004750 <nrf24_w_reg>

		break;
 8004974:	e022      	b.n	80049bc <nrf24_pipe_pld_size+0x94>
	case 1:
		nrf24_w_reg(RX_PW_P1, &size, 1);
 8004976:	1dbb      	adds	r3, r7, #6
 8004978:	2201      	movs	r2, #1
 800497a:	4619      	mov	r1, r3
 800497c:	2012      	movs	r0, #18
 800497e:	f7ff fee7 	bl	8004750 <nrf24_w_reg>

		break;
 8004982:	e01b      	b.n	80049bc <nrf24_pipe_pld_size+0x94>
	case 2:
		nrf24_w_reg(RX_PW_P2, &size, 1);
 8004984:	1dbb      	adds	r3, r7, #6
 8004986:	2201      	movs	r2, #1
 8004988:	4619      	mov	r1, r3
 800498a:	2013      	movs	r0, #19
 800498c:	f7ff fee0 	bl	8004750 <nrf24_w_reg>

		break;
 8004990:	e014      	b.n	80049bc <nrf24_pipe_pld_size+0x94>
	case 3:
		nrf24_w_reg(RX_PW_P3, &size, 1);
 8004992:	1dbb      	adds	r3, r7, #6
 8004994:	2201      	movs	r2, #1
 8004996:	4619      	mov	r1, r3
 8004998:	2014      	movs	r0, #20
 800499a:	f7ff fed9 	bl	8004750 <nrf24_w_reg>

		break;
 800499e:	e00d      	b.n	80049bc <nrf24_pipe_pld_size+0x94>
	case 4:
		nrf24_w_reg(RX_PW_P4, &size, 1);
 80049a0:	1dbb      	adds	r3, r7, #6
 80049a2:	2201      	movs	r2, #1
 80049a4:	4619      	mov	r1, r3
 80049a6:	2015      	movs	r0, #21
 80049a8:	f7ff fed2 	bl	8004750 <nrf24_w_reg>

		break;
 80049ac:	e006      	b.n	80049bc <nrf24_pipe_pld_size+0x94>
	case 5:
		nrf24_w_reg(RX_PW_P5, &size, 1);
 80049ae:	1dbb      	adds	r3, r7, #6
 80049b0:	2201      	movs	r2, #1
 80049b2:	4619      	mov	r1, r3
 80049b4:	2016      	movs	r0, #22
 80049b6:	f7ff fecb 	bl	8004750 <nrf24_w_reg>

		break;
 80049ba:	bf00      	nop
	}
}
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <nrf24_open_rx_pipe>:

void nrf24_open_rx_pipe(uint8_t pipe, uint8_t *addr){
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	6039      	str	r1, [r7, #0]
 80049ce:	71fb      	strb	r3, [r7, #7]

	uint8_t data = 0;
 80049d0:	2300      	movs	r3, #0
 80049d2:	73fb      	strb	r3, [r7, #15]

	data = nrf24_r_reg(EN_RXADDR, 1);
 80049d4:	2101      	movs	r1, #1
 80049d6:	2002      	movs	r0, #2
 80049d8:	f7ff fee2 	bl	80047a0 <nrf24_r_reg>
 80049dc:	4603      	mov	r3, r0
 80049de:	73fb      	strb	r3, [r7, #15]

	switch(pipe){
 80049e0:	79fb      	ldrb	r3, [r7, #7]
 80049e2:	2b05      	cmp	r3, #5
 80049e4:	d850      	bhi.n	8004a88 <nrf24_open_rx_pipe+0xc4>
 80049e6:	a201      	add	r2, pc, #4	@ (adr r2, 80049ec <nrf24_open_rx_pipe+0x28>)
 80049e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ec:	08004a05 	.word	0x08004a05
 80049f0:	08004a1b 	.word	0x08004a1b
 80049f4:	08004a31 	.word	0x08004a31
 80049f8:	08004a47 	.word	0x08004a47
 80049fc:	08004a5d 	.word	0x08004a5d
 8004a00:	08004a73 	.word	0x08004a73
	case 0:
		nrf24_w_reg(RX_ADDR_P0, addr, 5);
 8004a04:	2205      	movs	r2, #5
 8004a06:	6839      	ldr	r1, [r7, #0]
 8004a08:	200a      	movs	r0, #10
 8004a0a:	f7ff fea1 	bl	8004750 <nrf24_w_reg>

		data |= (1 << ERX_P0);
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	73fb      	strb	r3, [r7, #15]
		break;
 8004a18:	e036      	b.n	8004a88 <nrf24_open_rx_pipe+0xc4>
	case 1:
		nrf24_w_reg(RX_ADDR_P1, addr, 5);
 8004a1a:	2205      	movs	r2, #5
 8004a1c:	6839      	ldr	r1, [r7, #0]
 8004a1e:	200b      	movs	r0, #11
 8004a20:	f7ff fe96 	bl	8004750 <nrf24_w_reg>

		data |= (1 << ERX_P1);
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	f043 0302 	orr.w	r3, r3, #2
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	73fb      	strb	r3, [r7, #15]
		break;
 8004a2e:	e02b      	b.n	8004a88 <nrf24_open_rx_pipe+0xc4>
	case 2:
		nrf24_w_reg(RX_ADDR_P2, addr, 1);
 8004a30:	2201      	movs	r2, #1
 8004a32:	6839      	ldr	r1, [r7, #0]
 8004a34:	200c      	movs	r0, #12
 8004a36:	f7ff fe8b 	bl	8004750 <nrf24_w_reg>

		data |= (1 << ERX_P2);
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	f043 0304 	orr.w	r3, r3, #4
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	73fb      	strb	r3, [r7, #15]
		break;
 8004a44:	e020      	b.n	8004a88 <nrf24_open_rx_pipe+0xc4>
	case 3:
		nrf24_w_reg(RX_ADDR_P3, addr, 1);
 8004a46:	2201      	movs	r2, #1
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	200d      	movs	r0, #13
 8004a4c:	f7ff fe80 	bl	8004750 <nrf24_w_reg>

		data |= (1 << ERX_P3);
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	f043 0308 	orr.w	r3, r3, #8
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	73fb      	strb	r3, [r7, #15]
		break;
 8004a5a:	e015      	b.n	8004a88 <nrf24_open_rx_pipe+0xc4>
	case 4:
		nrf24_w_reg(RX_ADDR_P4, addr, 1);
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	6839      	ldr	r1, [r7, #0]
 8004a60:	200e      	movs	r0, #14
 8004a62:	f7ff fe75 	bl	8004750 <nrf24_w_reg>

		data |= (1 << ERX_P4);
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	f043 0310 	orr.w	r3, r3, #16
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	73fb      	strb	r3, [r7, #15]
		break;
 8004a70:	e00a      	b.n	8004a88 <nrf24_open_rx_pipe+0xc4>
	case 5:
		nrf24_w_reg(RX_ADDR_P5, addr, 1);
 8004a72:	2201      	movs	r2, #1
 8004a74:	6839      	ldr	r1, [r7, #0]
 8004a76:	200f      	movs	r0, #15
 8004a78:	f7ff fe6a 	bl	8004750 <nrf24_w_reg>

		data |= (1 << ERX_P5);
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	f043 0320 	orr.w	r3, r3, #32
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	73fb      	strb	r3, [r7, #15]
		break;
 8004a86:	bf00      	nop
	}

	nrf24_w_reg(EN_RXADDR, &data, 1);
 8004a88:	f107 030f 	add.w	r3, r7, #15
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	4619      	mov	r1, r3
 8004a90:	2002      	movs	r0, #2
 8004a92:	f7ff fe5d 	bl	8004750 <nrf24_w_reg>
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop

08004aa0 <nrf24_set_crc>:
	data &= ~(1 << pipe);

	nrf24_w_reg(EN_RXADDR, &data, 1);
}

void nrf24_set_crc(uint8_t en_crc, uint8_t crc0){
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	460a      	mov	r2, r1
 8004aaa:	71fb      	strb	r3, [r7, #7]
 8004aac:	4613      	mov	r3, r2
 8004aae:	71bb      	strb	r3, [r7, #6]
	uint8_t data = nrf24_r_reg(CONFIG, 1);
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	2000      	movs	r0, #0
 8004ab4:	f7ff fe74 	bl	80047a0 <nrf24_r_reg>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	73fb      	strb	r3, [r7, #15]

	data &= ~(1 << EN_CRC) & ~(1 << CRCO);
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	f023 030c 	bic.w	r3, r3, #12
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	73fb      	strb	r3, [r7, #15]

	data |= (en_crc << EN_CRC) | (crc0 << CRCO);
 8004ac6:	79fb      	ldrb	r3, [r7, #7]
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	b25a      	sxtb	r2, r3
 8004acc:	79bb      	ldrb	r3, [r7, #6]
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	b25b      	sxtb	r3, r3
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	b25a      	sxtb	r2, r3
 8004ad6:	7bfb      	ldrb	r3, [r7, #15]
 8004ad8:	b25b      	sxtb	r3, r3
 8004ada:	4313      	orrs	r3, r2
 8004adc:	b25b      	sxtb	r3, r3
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	73fb      	strb	r3, [r7, #15]

	nrf24_w_reg(CONFIG, &data, 1);
 8004ae2:	f107 030f 	add.w	r3, r7, #15
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	4619      	mov	r1, r3
 8004aea:	2000      	movs	r0, #0
 8004aec:	f7ff fe30 	bl	8004750 <nrf24_w_reg>
}
 8004af0:	bf00      	nop
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <nrf24_flush_tx>:
void nrf24_set_addr_width(uint8_t bytes){
	bytes -= 2;
	nrf24_w_reg(SETUP_AW, &bytes, 1);
}

void nrf24_flush_tx(void){
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
	csn_low();
 8004afc:	f7ff fe10 	bl	8004720 <csn_low>
	nrf24_w_spec_cmd(FLUSH_TX);
 8004b00:	20e1      	movs	r0, #225	@ 0xe1
 8004b02:	f7ff fe75 	bl	80047f0 <nrf24_w_spec_cmd>
	csn_high();
 8004b06:	f7ff fdff 	bl	8004708 <csn_high>
}
 8004b0a:	bf00      	nop
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <nrf24_flush_rx>:

void nrf24_flush_rx(void){
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	af00      	add	r7, sp, #0
	csn_low();
 8004b12:	f7ff fe05 	bl	8004720 <csn_low>
	nrf24_w_spec_cmd(FLUSH_RX);
 8004b16:	20e2      	movs	r0, #226	@ 0xe2
 8004b18:	f7ff fe6a 	bl	80047f0 <nrf24_w_spec_cmd>
	csn_high();
 8004b1c:	f7ff fdf4 	bl	8004708 <csn_high>
}
 8004b20:	bf00      	nop
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <nrf24_r_status>:

uint8_t nrf24_r_status(void){
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af02      	add	r7, sp, #8
	uint8_t data = 0;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = NOP_CMD;
 8004b2e:	23ff      	movs	r3, #255	@ 0xff
 8004b30:	71bb      	strb	r3, [r7, #6]

	csn_low();
 8004b32:	f7ff fdf5 	bl	8004720 <csn_low>
	HAL_SPI_TransmitReceive(&hspiX, &cmd, &data, 1, spi_rw_timeout);
 8004b36:	1dfa      	adds	r2, r7, #7
 8004b38:	1db9      	adds	r1, r7, #6
 8004b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	2301      	movs	r3, #1
 8004b42:	4805      	ldr	r0, [pc, #20]	@ (8004b58 <nrf24_r_status+0x34>)
 8004b44:	f7fd fd5c 	bl	8002600 <HAL_SPI_TransmitReceive>
	csn_high();
 8004b48:	f7ff fdde 	bl	8004708 <csn_high>

	return data;
 8004b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3708      	adds	r7, #8
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	2000002c 	.word	0x2000002c

08004b5c <nrf24_clear_rx_dr>:

void nrf24_clear_rx_dr(void){
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 8004b66:	f7ff ffdd 	bl	8004b24 <nrf24_r_status>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	71fb      	strb	r3, [r7, #7]

	data |= (1 << RX_DR);
 8004b6e:	79fb      	ldrb	r3, [r7, #7]
 8004b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(STATUS, &data, 1);
 8004b78:	1dfb      	adds	r3, r7, #7
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	2007      	movs	r0, #7
 8004b80:	f7ff fde6 	bl	8004750 <nrf24_w_reg>
}
 8004b84:	bf00      	nop
 8004b86:	3708      	adds	r7, #8
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <nrf24_clear_tx_ds>:

void nrf24_clear_tx_ds(void){
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8004b92:	2300      	movs	r3, #0
 8004b94:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 8004b96:	f7ff ffc5 	bl	8004b24 <nrf24_r_status>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	71fb      	strb	r3, [r7, #7]

	data |= (1 << TX_DS);
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	f043 0320 	orr.w	r3, r3, #32
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8004ba8:	1dfb      	adds	r3, r7, #7
 8004baa:	2201      	movs	r2, #1
 8004bac:	4619      	mov	r1, r3
 8004bae:	2007      	movs	r0, #7
 8004bb0:	f7ff fdce 	bl	8004750 <nrf24_w_reg>
}
 8004bb4:	bf00      	nop
 8004bb6:	3708      	adds	r7, #8
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <nrf24_clear_max_rt>:

void nrf24_clear_max_rt(void){
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_status();
 8004bc6:	f7ff ffad 	bl	8004b24 <nrf24_r_status>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	71fb      	strb	r3, [r7, #7]

	data |= (1 << MAX_RT);
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	f043 0310 	orr.w	r3, r3, #16
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	71fb      	strb	r3, [r7, #7]

    nrf24_w_reg(STATUS, &data, 1);
 8004bd8:	1dfb      	adds	r3, r7, #7
 8004bda:	2201      	movs	r2, #1
 8004bdc:	4619      	mov	r1, r3
 8004bde:	2007      	movs	r0, #7
 8004be0:	f7ff fdb6 	bl	8004750 <nrf24_w_reg>
}
 8004be4:	bf00      	nop
 8004be6:	3708      	adds	r7, #8
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <nrf24_listen>:
	csn_high();

	return width;
}

void nrf24_listen(void){
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
	uint8_t data = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	71fb      	strb	r3, [r7, #7]

	data = nrf24_r_reg(CONFIG, 1);
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f7ff fdd1 	bl	80047a0 <nrf24_r_reg>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	71fb      	strb	r3, [r7, #7]

	data |= (1 << PRIM_RX);
 8004c02:	79fb      	ldrb	r3, [r7, #7]
 8004c04:	f043 0301 	orr.w	r3, r3, #1
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	71fb      	strb	r3, [r7, #7]

	nrf24_w_reg(CONFIG, &data, 1);
 8004c0c:	1dfb      	adds	r3, r7, #7
 8004c0e:	2201      	movs	r2, #1
 8004c10:	4619      	mov	r1, r3
 8004c12:	2000      	movs	r0, #0
 8004c14:	f7ff fd9c 	bl	8004750 <nrf24_w_reg>

	ce_high();
 8004c18:	f7ff fd8e 	bl	8004738 <ce_high>
}
 8004c1c:	bf00      	nop
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <nrf24_data_available>:

uint8_t nrf24_carrier_detect(void){
	return nrf24_r_reg(RPD, 1);
}

uint8_t nrf24_data_available(void){
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0

 	uint8_t reg_dt = nrf24_r_reg(FIFO_STATUS, 1);
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	2017      	movs	r0, #23
 8004c2e:	f7ff fdb7 	bl	80047a0 <nrf24_r_reg>
 8004c32:	4603      	mov	r3, r0
 8004c34:	71fb      	strb	r3, [r7, #7]

	if(!(reg_dt & (1 << RX_EMPTY))){
 8004c36:	79fb      	ldrb	r3, [r7, #7]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d101      	bne.n	8004c44 <nrf24_data_available+0x20>
		return 1;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e000      	b.n	8004c46 <nrf24_data_available+0x22>
	}

	return 0;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
	...

08004c50 <nrf24_receive>:

void nrf24_receive(uint8_t *data, uint8_t size){
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = R_RX_PAYLOAD;
 8004c5c:	2361      	movs	r3, #97	@ 0x61
 8004c5e:	73fb      	strb	r3, [r7, #15]

	csn_low();
 8004c60:	f7ff fd5e 	bl	8004720 <csn_low>
	HAL_SPI_Transmit(&hspiX, &cmd, 1, spi_w_timeout);
 8004c64:	f107 010f 	add.w	r1, r7, #15
 8004c68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	4809      	ldr	r0, [pc, #36]	@ (8004c94 <nrf24_receive+0x44>)
 8004c70:	f7fd fa69 	bl	8002146 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspiX, data, size, spi_r_timeout);
 8004c74:	78fb      	ldrb	r3, [r7, #3]
 8004c76:	b29a      	uxth	r2, r3
 8004c78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4805      	ldr	r0, [pc, #20]	@ (8004c94 <nrf24_receive+0x44>)
 8004c80:	f7fd fba5 	bl	80023ce <HAL_SPI_Receive>
	csn_high();
 8004c84:	f7ff fd40 	bl	8004708 <csn_high>

	nrf24_clear_rx_dr();
 8004c88:	f7ff ff68 	bl	8004b5c <nrf24_clear_rx_dr>
}
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	2000002c 	.word	0x2000002c

08004c98 <nrf24_init>:
	}

	ce_high();
}

void nrf24_init(void){
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0

	nrf24_pwr_up();
 8004c9c:	f7ff fdba 	bl	8004814 <nrf24_pwr_up>

	nrf24_flush_tx();
 8004ca0:	f7ff ff2a 	bl	8004af8 <nrf24_flush_tx>
	nrf24_flush_rx();
 8004ca4:	f7ff ff33 	bl	8004b0e <nrf24_flush_rx>

	nrf24_clear_rx_dr();
 8004ca8:	f7ff ff58 	bl	8004b5c <nrf24_clear_rx_dr>
	nrf24_clear_tx_ds();
 8004cac:	f7ff ff6e 	bl	8004b8c <nrf24_clear_tx_ds>
	nrf24_clear_max_rt();
 8004cb0:	f7ff ff84 	bl	8004bbc <nrf24_clear_max_rt>
}
 8004cb4:	bf00      	nop
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <memset>:
 8004cb8:	4402      	add	r2, r0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d100      	bne.n	8004cc2 <memset+0xa>
 8004cc0:	4770      	bx	lr
 8004cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc6:	e7f9      	b.n	8004cbc <memset+0x4>

08004cc8 <__libc_init_array>:
 8004cc8:	b570      	push	{r4, r5, r6, lr}
 8004cca:	4d0d      	ldr	r5, [pc, #52]	@ (8004d00 <__libc_init_array+0x38>)
 8004ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8004d04 <__libc_init_array+0x3c>)
 8004cce:	1b64      	subs	r4, r4, r5
 8004cd0:	10a4      	asrs	r4, r4, #2
 8004cd2:	2600      	movs	r6, #0
 8004cd4:	42a6      	cmp	r6, r4
 8004cd6:	d109      	bne.n	8004cec <__libc_init_array+0x24>
 8004cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8004d08 <__libc_init_array+0x40>)
 8004cda:	4c0c      	ldr	r4, [pc, #48]	@ (8004d0c <__libc_init_array+0x44>)
 8004cdc:	f000 f818 	bl	8004d10 <_init>
 8004ce0:	1b64      	subs	r4, r4, r5
 8004ce2:	10a4      	asrs	r4, r4, #2
 8004ce4:	2600      	movs	r6, #0
 8004ce6:	42a6      	cmp	r6, r4
 8004ce8:	d105      	bne.n	8004cf6 <__libc_init_array+0x2e>
 8004cea:	bd70      	pop	{r4, r5, r6, pc}
 8004cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cf0:	4798      	blx	r3
 8004cf2:	3601      	adds	r6, #1
 8004cf4:	e7ee      	b.n	8004cd4 <__libc_init_array+0xc>
 8004cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfa:	4798      	blx	r3
 8004cfc:	3601      	adds	r6, #1
 8004cfe:	e7f2      	b.n	8004ce6 <__libc_init_array+0x1e>
 8004d00:	08004d50 	.word	0x08004d50
 8004d04:	08004d50 	.word	0x08004d50
 8004d08:	08004d50 	.word	0x08004d50
 8004d0c:	08004d54 	.word	0x08004d54

08004d10 <_init>:
 8004d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d12:	bf00      	nop
 8004d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d16:	bc08      	pop	{r3}
 8004d18:	469e      	mov	lr, r3
 8004d1a:	4770      	bx	lr

08004d1c <_fini>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	bf00      	nop
 8004d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d22:	bc08      	pop	{r3}
 8004d24:	469e      	mov	lr, r3
 8004d26:	4770      	bx	lr
